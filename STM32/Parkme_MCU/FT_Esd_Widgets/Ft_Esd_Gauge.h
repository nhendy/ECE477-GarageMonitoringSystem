/*
This file is automatically generated
Ft_Esd_Gauge
Header
*/

#ifndef Ft_Esd_Gauge__H
#define Ft_Esd_Gauge__H

#include "FT_DataTypes.h"
#include "Ft_Esd.h"
#include "Ft_Esd_DefaultTheme.h"
#include "Ft_Esd_PosSizeToRadius.h"
#include "Ft_Esd_Theme.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

/* EVE builtin Gauge Widget */
ESD_WIDGET(Ft_Esd_Gauge, Include = "Ft_Esd_Gauge.h", Callback, DisplayName = "ESD Gauge", Category = EsdWidgets, Icon = ":/icons/clock.png")
typedef struct
{
	void *Parent;
	ESD_INPUT(Theme, Type = Ft_Esd_Theme *, Default = Ft_Esd_Theme_GetCurrent)
	Ft_Esd_Theme *(* Theme)(void *context);
	ESD_INPUT(X, Type = ft_int16_t, Default = 0)
	ft_int16_t(* X)(void *context);
	ESD_INPUT(Y, Type = ft_int16_t, Default = 0)
	ft_int16_t(* Y)(void *context);
	ESD_INPUT(Width, Type = ft_int16_t, Max = 4096, Default = 144)
	ft_int16_t(* Width)(void *context);
	ESD_INPUT(Height, Type = ft_int16_t, Max = 4096, Default = 144)
	ft_int16_t(* Height)(void *context);
	Ft_Esd_PosSizeToRadius Ft_Esd_PosSizeToRadius;
	ESD_INPUT(Alpha, Type = ft_uint8_t, Min = 0, Max = 255, SingleStep = 1, Default = 255)
	ft_uint8_t(* Alpha)(void *context);
	ESD_INPUT(Val, DisplayName = "Value", Type = ft_uint16_t, Max = 65535)
	ft_uint16_t(* Val)(void *context);
	ESD_INPUT(Range, DisplayName = "Range", Type = ft_uint16_t, Max = 65535)
	ft_uint16_t(* Range)(void *context);
	ESD_INPUT(Major, Type = ft_uint16_t, Default = 4)
	ft_uint16_t(* Major)(void *context);
	ESD_INPUT(Minor, Type = ft_uint16_t, Default = 16)
	ft_uint16_t(* Minor)(void *context);
} Ft_Esd_Gauge;

void Ft_Esd_Gauge__Initializer(Ft_Esd_Gauge *context);

ESD_SLOT(Render)
void Ft_Esd_Gauge_Render(Ft_Esd_Gauge *context);

#endif /* Ft_Esd_Gauge__H */

/* end of file */
