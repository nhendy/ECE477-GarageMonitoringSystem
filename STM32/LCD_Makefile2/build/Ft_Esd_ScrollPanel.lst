ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"Ft_Esd_ScrollPanel.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Ft_Esd_BitmapCell_GetInfo,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-sp-d16
  24              	Ft_Esd_BitmapCell_GetInfo:
  25              	.LFB9:
  26              		.file 1 "FT_Esd_Framework/Ft_Esd_BitmapInfo.h"
   1:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** /*
   2:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** Bitmap info structure
   3:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** */
   4:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
   5:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** #ifndef FT_ESD_BITMAPINFO_H
   6:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** #define FT_ESD_BITMAPINFO_H
   7:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
   8:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** #include "Ft_Esd.h"
   9:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** #include "FT_DataTypes.h"
  10:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** #include "Ft_Esd_GpuAlloc.h"
  11:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  12:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_TYPE(Ft_Esd_BitmapInfo, Native = Struct) // TODO: Struct support, expose values
  13:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** typedef struct
  14:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** {
  15:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ft_int32_t Width;
  16:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ft_int32_t Height;
  17:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ft_int32_t Stride;
  18:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ft_int32_t Format;
  19:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ft_int32_t Size;
  20:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	const char *File;
  21:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  22:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	// Handle pointing to the address in RAM_G if it is allocated
  23:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	Ft_Esd_GpuHandle GpuHandle;
  24:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  25:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	// Bitmap handle that is being used
  26:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ft_uint32_t BitmapHandle;
  27:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  28:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	const char *PaletteFile;
  29:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	Ft_Esd_GpuHandle PaletteGpuHandle;
  30:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  31:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	// When this is set, the allocated ram is not free'd automatically
  32:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	// Use Ft_Esd_GpuAlloc_Free(GpuAlloc, GpuHandle) to free the GPU ram manually
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 2


  33:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ft_bool_t Persistent;
  34:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  35:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** } Ft_Esd_BitmapInfo;
  36:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  37:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_TYPE(Ft_Esd_BitmapInfo *, Native = Pointer, Edit = Library)
  38:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  39:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_TYPE(Ft_Esd_BitmapCell, Native = Struct) // TODO: Struct support, expose values
  40:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** typedef struct
  41:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** {
  42:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	Ft_Esd_BitmapInfo *Info;
  43:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ft_int32_t Cell;
  44:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** } Ft_Esd_BitmapCell;
  45:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  46:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_TYPE(Ft_Esd_BitmapCell *, Native = Pointer, Edit = Library)
  47:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  48:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** // Attempts to load the specified bitmap if it has not been loaded into RAM_G yet.
  49:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** // Call during the Update cycle of each frame to keep the bitmap flagged as in use, otherwise the m
  50:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_FUNCTION(Ft_Esd_LoadBitmap, Type = ft_uint32_t, Include = "Ft_Esd_BitmapInfo.h", DisplayName = 
  51:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_PARAMETER(bitmapInfo, Type = Ft_Esd_BitmapInfo *)
  52:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ft_uint32_t Ft_Esd_LoadBitmap(Ft_Esd_BitmapInfo *bitmapInfo);
  53:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  54:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_FUNCTION(Ft_Esd_LoadPalette, Type = ft_uint32_t, Include = "Ft_Esd_BitmapInfo.h", DisplayName =
  55:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_PARAMETER(bitmapInfo, Type = Ft_Esd_BitmapInfo *)
  56:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ft_uint32_t Ft_Esd_LoadPalette(Ft_Esd_BitmapInfo *bitmapInfo);
  57:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  58:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_ENUM(_BitmapResourceFormat, DisplayName = "Bitmap Format")
  59:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(ARGB1555)
  60:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(L1)
  61:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(L2)
  62:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(L4)
  63:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(L8)
  64:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(RGB332)
  65:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(ARGB2)
  66:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(ARGB4)
  67:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(RGB565)
  68:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(PALETTED565)
  69:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_IDENTIFIER(PALETTED4444)
  70:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** // ESD_IDENTIFIER(PALETTED8)
  71:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** // ESD_IDENTIFIER(JPEG)
  72:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** // ESD_IDENTIFIER(PNG)
  73:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_END()
  74:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  75:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_LOGIC(Ft_Esd_SwitchBitmapCell, Callback, Include = "Ft_Esd_BitmapInfo.h", DisplayName = "Switch
  76:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** typedef struct
  77:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** {
  78:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	// Callback
  79:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	void *Parent;
  80:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  81:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	//
  82:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	// Input
  83:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	//
  84:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  85:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ESD_INPUT(BitmapInfo, Type = Ft_Esd_BitmapInfo *, DisplayName = "Bitmap Info")
  86:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	Ft_Esd_BitmapInfo *(* BitmapInfo)(void *context);
  87:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  88:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ESD_INPUT(Cell, Type = ft_uint8_t, DisplayName = "Cell")
  89:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	ft_uint8_t(* Cell)(void *context);
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 3


  90:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  91:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	//
  92:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	// Variables
  93:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	//
  94:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  95:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	// BitmapCell object
  96:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	Ft_Esd_BitmapCell BitmapCell;
  97:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
  98:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** } Ft_Esd_SwitchBitmapCell;
  99:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
 100:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** void Ft_Esd_SwitchBitmapCell__Initializer(Ft_Esd_SwitchBitmapCell *context);
 101:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
 102:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_OUTPUT(BitmapCell, Type = Ft_Esd_BitmapCell *, DisplayName = "Bitmap Cell")
 103:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** Ft_Esd_BitmapCell *Ft_Esd_SwitchBitmapCell_BitmapCell(Ft_Esd_SwitchBitmapCell *context);
 104:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
 105:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_UPDATE(Ft_Esd_BitmapPersist, DisplayName = "Bitmap Persist", Category = EsdUtilities)
 106:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_PARAMETER(bitmapCell, Type = Ft_Esd_BitmapCell *)
 107:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** void Ft_Esd_BitmapPersist(Ft_Esd_BitmapCell *bitmapCell);
 108:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 
 109:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_FUNCTION(Ft_Esd_BitmapCell_GetInfo, Type = Ft_Esd_BitmapInfo *, DisplayName = "ESD BitmapCell G
 110:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** ESD_PARAMETER(bitmapCell, Type = Ft_Esd_BitmapCell *)
 111:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** static Ft_Esd_BitmapInfo *Ft_Esd_BitmapCell_GetInfo(Ft_Esd_BitmapCell *bitmapCell)
 112:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** {
  27              		.loc 1 112 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 113:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	if (!bitmapCell) return 0;
  43              		.loc 1 113 0
  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 002B     		cmp	r3, #0
  46 000c 01D1     		bne	.L2
  47              		.loc 1 113 0 is_stmt 0 discriminator 1
  48 000e 0023     		movs	r3, #0
  49 0010 01E0     		b	.L3
  50              	.L2:
 114:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** 	return bitmapCell->Info;
  51              		.loc 1 114 0 is_stmt 1
  52 0012 7B68     		ldr	r3, [r7, #4]
  53 0014 1B68     		ldr	r3, [r3]
  54              	.L3:
 115:FT_Esd_Framework/Ft_Esd_BitmapInfo.h **** }
  55              		.loc 1 115 0
  56 0016 1846     		mov	r0, r3
  57 0018 0C37     		adds	r7, r7, #12
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 4


  58              	.LCFI3:
  59              		.cfi_def_cfa_offset 4
  60 001a BD46     		mov	sp, r7
  61              	.LCFI4:
  62              		.cfi_def_cfa_register 13
  63              		@ sp needed
  64 001c 5DF8047B 		ldr	r7, [sp], #4
  65              	.LCFI5:
  66              		.cfi_restore 7
  67              		.cfi_def_cfa_offset 0
  68 0020 7047     		bx	lr
  69              		.cfi_endproc
  70              	.LFE9:
  72              		.section	.text.Ft_Esd_Dl_SAVE_CONTEXT,"ax",%progbits
  73              		.align	1
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv5-sp-d16
  79              	Ft_Esd_Dl_SAVE_CONTEXT:
  80              	.LFB18:
  81              		.file 2 "FT_Esd_Framework/Ft_Esd_Dl.h"
   1:FT_Esd_Framework/Ft_Esd_Dl.h **** 
   2:FT_Esd_Framework/Ft_Esd_Dl.h **** #ifndef FT_ESD_DL_H
   3:FT_Esd_Framework/Ft_Esd_Dl.h **** #define FT_ESD_DL_H
   4:FT_Esd_Framework/Ft_Esd_Dl.h **** 
   5:FT_Esd_Framework/Ft_Esd_Dl.h **** #include "FT_DataTypes.h"
   6:FT_Esd_Framework/Ft_Esd_Dl.h **** #include "FT_Platform.h"
   7:FT_Esd_Framework/Ft_Esd_Dl.h **** #include "Ft_Esd.h"
   8:FT_Esd_Framework/Ft_Esd_Dl.h **** #include "FT_Gpu.h"
   9:FT_Esd_Framework/Ft_Esd_Dl.h **** #include "Ft_Esd_BitmapInfo.h"
  10:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  11:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_CATEGORY(EsdUtilities, DisplayName = "ESD Utilities")
  12:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_CATEGORY(EveRenderFunctions, DisplayName = "EVE Render Functions")
  13:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  14:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_TYPE(Ft_Gpu_Hal_Context_t *, Native = Pointer, Edit = Library)
  15:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  16:FT_Esd_Framework/Ft_Esd_Dl.h **** // Keep cache of displaylist values that don't often change but are generally set by every widget t
  17:FT_Esd_Framework/Ft_Esd_Dl.h **** #define FT_ESD_OPTIMIZE_DISPLAYLIST 1
  18:FT_Esd_Framework/Ft_Esd_Dl.h **** #define FT_ESD_STATE_STACK_SIZE 5
  19:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  20:FT_Esd_Framework/Ft_Esd_Dl.h **** #define FT_ESD_BITMAPHANDLE_INVALID 255
  21:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  22:FT_Esd_Framework/Ft_Esd_Dl.h **** //
  23:FT_Esd_Framework/Ft_Esd_Dl.h **** // Structs
  24:FT_Esd_Framework/Ft_Esd_Dl.h **** //
  25:FT_Esd_Framework/Ft_Esd_Dl.h **** #ifdef FT_ESD_OPTIMIZE_DISPLAYLIST
  26:FT_Esd_Framework/Ft_Esd_Dl.h **** #define FT_ESD_STATE Ft_Esd_GpuState[Ft_Esd_GpuState_I]
  27:FT_Esd_Framework/Ft_Esd_Dl.h **** typedef struct
  28:FT_Esd_Framework/Ft_Esd_Dl.h **** {
  29:FT_Esd_Framework/Ft_Esd_Dl.h **** 	// Keep to a minimum
  30:FT_Esd_Framework/Ft_Esd_Dl.h **** #ifdef FT_81X_ENABLE
  31:FT_Esd_Framework/Ft_Esd_Dl.h **** 	ft_uint32_t PaletteSource;
  32:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
  33:FT_Esd_Framework/Ft_Esd_Dl.h **** 	ft_uint32_t ColorRGB;
  34:FT_Esd_Framework/Ft_Esd_Dl.h **** 	ft_uint8_t ColorA;
  35:FT_Esd_Framework/Ft_Esd_Dl.h **** 	ft_uint8_t Handle;         // Current handle
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 5


  36:FT_Esd_Framework/Ft_Esd_Dl.h **** 	ft_uint8_t Cell;           // Current cell
  37:FT_Esd_Framework/Ft_Esd_Dl.h **** 	ft_bool_t BitmapTransform; // BitmapTransform other than default is set
  38:FT_Esd_Framework/Ft_Esd_Dl.h **** #ifdef FT_81X_ENABLE
  39:FT_Esd_Framework/Ft_Esd_Dl.h **** 	ft_uint8_t VertexFormat;   // Current vertex format
  40:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
  41:FT_Esd_Framework/Ft_Esd_Dl.h **** } Ft_Esd_GpuState_T;
  42:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
  43:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  44:FT_Esd_Framework/Ft_Esd_Dl.h **** //
  45:FT_Esd_Framework/Ft_Esd_Dl.h **** // Globals
  46:FT_Esd_Framework/Ft_Esd_Dl.h **** //
  47:FT_Esd_Framework/Ft_Esd_Dl.h **** extern Ft_Gpu_Hal_Context_t *Ft_Esd_Host;
  48:FT_Esd_Framework/Ft_Esd_Dl.h **** extern ft_uint16_t Ft_Esd_FontHeight[32];
  49:FT_Esd_Framework/Ft_Esd_Dl.h **** #ifdef FT_ESD_OPTIMIZE_DISPLAYLIST
  50:FT_Esd_Framework/Ft_Esd_Dl.h **** extern Ft_Esd_GpuState_T Ft_Esd_GpuState[FT_ESD_STATE_STACK_SIZE];
  51:FT_Esd_Framework/Ft_Esd_Dl.h **** extern ft_uint8_t Ft_Esd_GpuState_I;
  52:FT_Esd_Framework/Ft_Esd_Dl.h **** extern ft_uint32_t Ft_Esd_CoFgColor;
  53:FT_Esd_Framework/Ft_Esd_Dl.h **** extern ft_uint32_t Ft_Esd_CoBgColor;
  54:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
  55:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  56:FT_Esd_Framework/Ft_Esd_Dl.h **** //Get the height of builtin font
  57:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_FUNCTION(Ft_Esd_GetFontHeight, Type = ft_uint16_t ,DisplayName = "Get Font Height", Category = 
  58:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_PARAMETER(i, Type = int, DisplayName = "Bitmap Handle", Default = 0, Min = 0, Max = 31)
  59:FT_Esd_Framework/Ft_Esd_Dl.h **** // inline static ft_uint16_t Ft_Esd_GetFontHeight(int i) { return Ft_Esd_FontHeight[i]; }
  60:FT_Esd_Framework/Ft_Esd_Dl.h **** #define Ft_Esd_GetFontHeight(i) (Ft_Esd_FontHeight[i]);
  61:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  62:FT_Esd_Framework/Ft_Esd_Dl.h **** // Reset any cached state
  63:FT_Esd_Framework/Ft_Esd_Dl.h **** void Ft_Esd_ResetGpuState();
  64:FT_Esd_Framework/Ft_Esd_Dl.h **** void Ft_Esd_ResetCoState();
  65:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  66:FT_Esd_Framework/Ft_Esd_Dl.h **** ft_uint32_t Ft_Esd_BitmapHandle_GetTotalUsed();
  67:FT_Esd_Framework/Ft_Esd_Dl.h **** ft_uint32_t Ft_Esd_BitmapHandle_GetTotal();
  68:FT_Esd_Framework/Ft_Esd_Dl.h **** 
  69:FT_Esd_Framework/Ft_Esd_Dl.h **** /// Set current tag. Must be returned to 255 after usage, to ensure next widgets don't draw with in
  70:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_FUNCTION(Ft_Esd_Dl_TAG, Type = ft_void_t, Category = EveRenderFunctions, Inline)
  71:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_PARAMETER(s, Type = ft_uint8_t, DisplayName = "Tag", Default = 255, Min = 0, Max = 255)
  72:FT_Esd_Framework/Ft_Esd_Dl.h **** inline static ft_void_t Ft_Esd_Dl_TAG(ft_uint8_t s)
  73:FT_Esd_Framework/Ft_Esd_Dl.h **** {
  74:FT_Esd_Framework/Ft_Esd_Dl.h **** 	Ft_Gpu_Hal_WrCmd32(Ft_Esd_Host, TAG(s));
  75:FT_Esd_Framework/Ft_Esd_Dl.h **** }
  76:FT_Esd_Framework/Ft_Esd_Dl.h **** //Specify color RGB
  77:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_FUNCTION(Ft_Esd_Dl_COLOR_RGB, Type = ft_void_t, Category = EveRenderFunctions, Inline)
  78:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_PARAMETER(c, Type = ft_rgb32_t, DisplayName = "Color")
  79:FT_Esd_Framework/Ft_Esd_Dl.h **** inline static ft_void_t Ft_Esd_Dl_COLOR_RGB(ft_rgb32_t c)
  80:FT_Esd_Framework/Ft_Esd_Dl.h **** {
  81:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
  82:FT_Esd_Framework/Ft_Esd_Dl.h **** 	ft_rgb32_t rgb = c & 0xFFFFFF;
  83:FT_Esd_Framework/Ft_Esd_Dl.h **** 	if (rgb != FT_ESD_STATE.ColorRGB)
  84:FT_Esd_Framework/Ft_Esd_Dl.h **** 	{
  85:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
  86:FT_Esd_Framework/Ft_Esd_Dl.h **** 		Ft_Gpu_Hal_WrCmd32(Ft_Esd_Host, (4UL << 24) | (rgb));
  87:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
  88:FT_Esd_Framework/Ft_Esd_Dl.h **** 		FT_ESD_STATE.ColorRGB = rgb;
  89:FT_Esd_Framework/Ft_Esd_Dl.h **** 	}
  90:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
  91:FT_Esd_Framework/Ft_Esd_Dl.h **** }
  92:FT_Esd_Framework/Ft_Esd_Dl.h **** //Specify alpha channel
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 6


  93:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_FUNCTION(Ft_Esd_Dl_COLOR_A, Type = ft_void_t, Category = EveRenderFunctions, Inline)
  94:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_PARAMETER(alpha, Type = ft_uint8_t, Default = 255, Min = 0, Max = 255)
  95:FT_Esd_Framework/Ft_Esd_Dl.h **** inline static ft_void_t Ft_Esd_Dl_COLOR_A(ft_uint8_t alpha)
  96:FT_Esd_Framework/Ft_Esd_Dl.h **** {
  97:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
  98:FT_Esd_Framework/Ft_Esd_Dl.h **** 	if (alpha != FT_ESD_STATE.ColorA)
  99:FT_Esd_Framework/Ft_Esd_Dl.h **** 	{
 100:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
 101:FT_Esd_Framework/Ft_Esd_Dl.h **** 		Ft_Gpu_Hal_WrCmd32(Ft_Esd_Host, COLOR_A(alpha));
 102:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
 103:FT_Esd_Framework/Ft_Esd_Dl.h **** 		FT_ESD_STATE.ColorA = alpha;
 104:FT_Esd_Framework/Ft_Esd_Dl.h **** 	}
 105:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
 106:FT_Esd_Framework/Ft_Esd_Dl.h **** }
 107:FT_Esd_Framework/Ft_Esd_Dl.h **** 
 108:FT_Esd_Framework/Ft_Esd_Dl.h **** //Specify color: Alpha(31~24 bit) + RGB(23~0 bit)
 109:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_FUNCTION(Ft_Esd_Dl_COLOR_ARGB, Type = ft_void_t, Category = EveRenderFunctions, Inline)
 110:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_PARAMETER(c, Type = ft_argb32_t, DisplayName = "Color")
 111:FT_Esd_Framework/Ft_Esd_Dl.h **** inline static ft_void_t Ft_Esd_Dl_COLOR_ARGB(ft_uint32_t c)
 112:FT_Esd_Framework/Ft_Esd_Dl.h **** {
 113:FT_Esd_Framework/Ft_Esd_Dl.h **** 	Ft_Esd_Dl_COLOR_RGB(c);
 114:FT_Esd_Framework/Ft_Esd_Dl.h **** 	Ft_Esd_Dl_COLOR_A(c >> 24);
 115:FT_Esd_Framework/Ft_Esd_Dl.h **** }
 116:FT_Esd_Framework/Ft_Esd_Dl.h **** //Specify bitmap handle, see BITMAP_HANDLE
 117:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_FUNCTION(Ft_Esd_Dl_BITMAP_HANDLE, Type = ft_void_t, Category = EveRenderFunctions, Inline)
 118:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_PARAMETER(handle, Type = ft_uint8_t, Min = 0, Max = 31)
 119:FT_Esd_Framework/Ft_Esd_Dl.h **** inline static ft_void_t Ft_Esd_Dl_BITMAP_HANDLE(ft_uint8_t handle)
 120:FT_Esd_Framework/Ft_Esd_Dl.h **** {
 121:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
 122:FT_Esd_Framework/Ft_Esd_Dl.h **** 	if (handle != FT_ESD_STATE.Handle)
 123:FT_Esd_Framework/Ft_Esd_Dl.h **** 	{
 124:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
 125:FT_Esd_Framework/Ft_Esd_Dl.h **** 		Ft_Gpu_Hal_WrCmd32(Ft_Esd_Host, BITMAP_HANDLE(handle));
 126:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
 127:FT_Esd_Framework/Ft_Esd_Dl.h **** 		FT_ESD_STATE.Handle = handle;
 128:FT_Esd_Framework/Ft_Esd_Dl.h **** 	}
 129:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
 130:FT_Esd_Framework/Ft_Esd_Dl.h **** }
 131:FT_Esd_Framework/Ft_Esd_Dl.h **** 
 132:FT_Esd_Framework/Ft_Esd_Dl.h **** //Specify cell number for bitmap, see CELL 
 133:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_FUNCTION(Ft_Esd_Dl_CELL, Type = ft_void_t, Category = EveRenderFunctions, Inline)
 134:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_PARAMETER(cell, Type = ft_uint8_t, Min = 0, Max = 255)
 135:FT_Esd_Framework/Ft_Esd_Dl.h **** inline static ft_void_t Ft_Esd_Dl_CELL(ft_uint8_t cell)
 136:FT_Esd_Framework/Ft_Esd_Dl.h **** {
 137:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
 138:FT_Esd_Framework/Ft_Esd_Dl.h **** 	if (cell != FT_ESD_STATE.Cell)
 139:FT_Esd_Framework/Ft_Esd_Dl.h **** 	{
 140:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
 141:FT_Esd_Framework/Ft_Esd_Dl.h **** 		Ft_Gpu_Hal_WrCmd32(Ft_Esd_Host, CELL(cell));
 142:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
 143:FT_Esd_Framework/Ft_Esd_Dl.h **** 		FT_ESD_STATE.Cell = cell;
 144:FT_Esd_Framework/Ft_Esd_Dl.h **** 	}
 145:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
 146:FT_Esd_Framework/Ft_Esd_Dl.h **** }
 147:FT_Esd_Framework/Ft_Esd_Dl.h **** //Save EVE context, see SAVE_CONTEXT
 148:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_FUNCTION(Ft_Esd_Dl_SAVE_CONTEXT, Type = ft_void_t, Category = EveRenderFunctions, Inline)
 149:FT_Esd_Framework/Ft_Esd_Dl.h **** inline static ft_void_t Ft_Esd_Dl_SAVE_CONTEXT()
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 7


 150:FT_Esd_Framework/Ft_Esd_Dl.h **** {
  82              		.loc 2 150 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 8
  85              		@ frame_needed = 1, uses_anonymous_args = 0
  86 0000 90B5     		push	{r4, r7, lr}
  87              	.LCFI6:
  88              		.cfi_def_cfa_offset 12
  89              		.cfi_offset 4, -12
  90              		.cfi_offset 7, -8
  91              		.cfi_offset 14, -4
  92 0002 83B0     		sub	sp, sp, #12
  93              	.LCFI7:
  94              		.cfi_def_cfa_offset 24
  95 0004 00AF     		add	r7, sp, #0
  96              	.LCFI8:
  97              		.cfi_def_cfa_register 7
 151:FT_Esd_Framework/Ft_Esd_Dl.h **** 	Ft_Gpu_Hal_WrCmd32(Ft_Esd_Host, SAVE_CONTEXT());
  98              		.loc 2 151 0
  99 0006 114B     		ldr	r3, .L7
 100 0008 1B68     		ldr	r3, [r3]
 101 000a 4FF00851 		mov	r1, #570425344
 102 000e 1846     		mov	r0, r3
 103 0010 FFF7FEFF 		bl	Ft_Gpu_Hal_WrCmd32
 152:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
 153:FT_Esd_Framework/Ft_Esd_Dl.h **** 	ft_uint8_t nextState = Ft_Esd_GpuState_I + 1;
 104              		.loc 2 153 0
 105 0014 0E4B     		ldr	r3, .L7+4
 106 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 107 0018 0133     		adds	r3, r3, #1
 108 001a FB71     		strb	r3, [r7, #7]
 154:FT_Esd_Framework/Ft_Esd_Dl.h **** 	if (nextState < FT_ESD_STATE_STACK_SIZE)
 109              		.loc 2 154 0
 110 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 111 001e 042B     		cmp	r3, #4
 112 0020 10D8     		bhi	.L6
 155:FT_Esd_Framework/Ft_Esd_Dl.h **** 	{
 156:FT_Esd_Framework/Ft_Esd_Dl.h **** 		Ft_Esd_GpuState[nextState] = Ft_Esd_GpuState[Ft_Esd_GpuState_I];
 113              		.loc 2 156 0
 114 0022 0B4B     		ldr	r3, .L7+4
 115 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 116 0026 1846     		mov	r0, r3
 117 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 118 002a 0A4A     		ldr	r2, .L7+8
 119 002c 1B01     		lsls	r3, r3, #4
 120 002e D118     		adds	r1, r2, r3
 121 0030 084A     		ldr	r2, .L7+8
 122 0032 0301     		lsls	r3, r0, #4
 123 0034 1344     		add	r3, r3, r2
 124 0036 0C46     		mov	r4, r1
 125 0038 0FCB     		ldm	r3, {r0, r1, r2, r3}
 126 003a 84E80F00 		stm	r4, {r0, r1, r2, r3}
 157:FT_Esd_Framework/Ft_Esd_Dl.h **** 		Ft_Esd_GpuState_I = nextState;
 127              		.loc 2 157 0
 128 003e 044A     		ldr	r2, .L7+4
 129 0040 FB79     		ldrb	r3, [r7, #7]
 130 0042 1370     		strb	r3, [r2]
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 8


 131              	.L6:
 158:FT_Esd_Framework/Ft_Esd_Dl.h **** 	}
 159:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
 160:FT_Esd_Framework/Ft_Esd_Dl.h **** }
 132              		.loc 2 160 0
 133 0044 00BF     		nop
 134 0046 0C37     		adds	r7, r7, #12
 135              	.LCFI9:
 136              		.cfi_def_cfa_offset 12
 137 0048 BD46     		mov	sp, r7
 138              	.LCFI10:
 139              		.cfi_def_cfa_register 13
 140              		@ sp needed
 141 004a 90BD     		pop	{r4, r7, pc}
 142              	.L8:
 143              		.align	2
 144              	.L7:
 145 004c 00000000 		.word	Ft_Esd_Host
 146 0050 00000000 		.word	Ft_Esd_GpuState_I
 147 0054 00000000 		.word	Ft_Esd_GpuState
 148              		.cfi_endproc
 149              	.LFE18:
 151              		.section	.text.Ft_Esd_Dl_RESTORE_CONTEXT,"ax",%progbits
 152              		.align	1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv5-sp-d16
 158              	Ft_Esd_Dl_RESTORE_CONTEXT:
 159              	.LFB19:
 161:FT_Esd_Framework/Ft_Esd_Dl.h **** //Restore EVE context, see RESTORE_CONTEXT
 162:FT_Esd_Framework/Ft_Esd_Dl.h **** ESD_FUNCTION(Ft_Esd_Dl_RESTORE_CONTEXT, Type = ft_void_t, Category = EveRenderFunctions, Inline)
 163:FT_Esd_Framework/Ft_Esd_Dl.h **** inline static ft_void_t Ft_Esd_Dl_RESTORE_CONTEXT()
 164:FT_Esd_Framework/Ft_Esd_Dl.h **** {
 160              		.loc 2 164 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 1, uses_anonymous_args = 0
 164 0000 80B5     		push	{r7, lr}
 165              	.LCFI11:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 7, -8
 168              		.cfi_offset 14, -4
 169 0002 00AF     		add	r7, sp, #0
 170              	.LCFI12:
 171              		.cfi_def_cfa_register 7
 165:FT_Esd_Framework/Ft_Esd_Dl.h **** 	Ft_Gpu_Hal_WrCmd32(Ft_Esd_Host, RESTORE_CONTEXT());
 172              		.loc 2 165 0
 173 0004 094B     		ldr	r3, .L12
 174 0006 1B68     		ldr	r3, [r3]
 175 0008 4FF00C51 		mov	r1, #587202560
 176 000c 1846     		mov	r0, r3
 177 000e FFF7FEFF 		bl	Ft_Gpu_Hal_WrCmd32
 166:FT_Esd_Framework/Ft_Esd_Dl.h **** #if FT_ESD_OPTIMIZE_DISPLAYLIST
 167:FT_Esd_Framework/Ft_Esd_Dl.h **** 	if (Ft_Esd_GpuState_I > 0)
 178              		.loc 2 167 0
 179 0012 074B     		ldr	r3, .L12+4
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 9


 180 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 181 0016 002B     		cmp	r3, #0
 182 0018 05D0     		beq	.L11
 168:FT_Esd_Framework/Ft_Esd_Dl.h **** 		--Ft_Esd_GpuState_I;
 183              		.loc 2 168 0
 184 001a 054B     		ldr	r3, .L12+4
 185 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 186 001e 013B     		subs	r3, r3, #1
 187 0020 DAB2     		uxtb	r2, r3
 188 0022 034B     		ldr	r3, .L12+4
 189 0024 1A70     		strb	r2, [r3]
 190              	.L11:
 169:FT_Esd_Framework/Ft_Esd_Dl.h **** #endif
 170:FT_Esd_Framework/Ft_Esd_Dl.h **** }
 191              		.loc 2 170 0
 192 0026 00BF     		nop
 193 0028 80BD     		pop	{r7, pc}
 194              	.L13:
 195 002a 00BF     		.align	2
 196              	.L12:
 197 002c 00000000 		.word	Ft_Esd_Host
 198 0030 00000000 		.word	Ft_Esd_GpuState_I
 199              		.cfi_endproc
 200              	.LFE19:
 202              		.section	.text.Ft_Esd_ScrollPanel_Update_Scroll,"ax",%progbits
 203              		.align	1
 204              		.global	Ft_Esd_ScrollPanel_Update_Scroll
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 208              		.fpu fpv5-sp-d16
 210              	Ft_Esd_ScrollPanel_Update_Scroll:
 211              	.LFB23:
 212              		.file 3 "FT_Esd_Widgets/Ft_Esd_ScrollPanel.c"
   1:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** #include "Ft_Esd.h"
   2:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** #include "Ft_Esd_ScrollPanel.h"
   3:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** #include "Ft_Esd_Layout.h"
   4:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** #include "Ft_Esd_Dl.h"
   5:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** #include "Ft_Esd_TouchArea.h"
   6:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
   7:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** #include <stdlib.h>
   8:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
   9:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** extern Ft_Gpu_Hal_Context_t *Ft_Esd_Host;
  10:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
  11:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** #define FT_ESD_SCROLLPANEL_SCISSOR 2
  12:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
  13:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** ESD_METHOD(Ft_Esd_ScrollPanel_Update_Scroll, Context = Ft_Esd_ScrollPanel)
  14:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** void Ft_Esd_ScrollPanel_Update_Scroll(Ft_Esd_ScrollPanel *context)
  15:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** {
 213              		.loc 3 15 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 24
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217 0000 90B5     		push	{r4, r7, lr}
 218              	.LCFI13:
 219              		.cfi_def_cfa_offset 12
 220              		.cfi_offset 4, -12
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 10


 221              		.cfi_offset 7, -8
 222              		.cfi_offset 14, -4
 223 0002 87B0     		sub	sp, sp, #28
 224              	.LCFI14:
 225              		.cfi_def_cfa_offset 40
 226 0004 00AF     		add	r7, sp, #0
 227              	.LCFI15:
 228              		.cfi_def_cfa_register 7
 229 0006 7860     		str	r0, [r7, #4]
  16:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	ft_bool_t touching = context->TouchArea.Touching;
 230              		.loc 3 16 0
 231 0008 7B68     		ldr	r3, [r7, #4]
 232 000a 1B7D     		ldrb	r3, [r3, #20]
 233 000c FB75     		strb	r3, [r7, #23]
  17:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	if (touching)
 234              		.loc 3 17 0
 235 000e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 236 0010 002B     		cmp	r3, #0
 237 0012 2BD0     		beq	.L15
 238              	.LBB2:
  18:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
  19:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		ft_int16_t touchY = Ft_Esd_TouchArea_TouchY(&context->TouchArea);
 239              		.loc 3 19 0
 240 0014 7B68     		ldr	r3, [r7, #4]
 241 0016 0433     		adds	r3, r3, #4
 242 0018 1846     		mov	r0, r3
 243 001a FFF7FEFF 		bl	Ft_Esd_TouchArea_TouchY
 244 001e 0346     		mov	r3, r0
 245 0020 BB82     		strh	r3, [r7, #20]	@ movhi
  20:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		ft_int16_t diffY = touchY - context->PreviousTouchY;
 246              		.loc 3 20 0
 247 0022 BA8A     		ldrh	r2, [r7, #20]
 248 0024 7B68     		ldr	r3, [r7, #4]
 249 0026 B3F94C30 		ldrsh	r3, [r3, #76]
 250 002a 9BB2     		uxth	r3, r3
 251 002c D31A     		subs	r3, r2, r3
 252 002e 9BB2     		uxth	r3, r3
 253 0030 7B82     		strh	r3, [r7, #18]	@ movhi
  21:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		context->OffsetY = context->PreviousOffsetY - diffY;
 254              		.loc 3 21 0
 255 0032 7B68     		ldr	r3, [r7, #4]
 256 0034 B3F95C30 		ldrsh	r3, [r3, #92]
 257 0038 1A46     		mov	r2, r3
 258 003a B7F91230 		ldrsh	r3, [r7, #18]
 259 003e D21A     		subs	r2, r2, r3
 260 0040 7B68     		ldr	r3, [r7, #4]
 261 0042 1A64     		str	r2, [r3, #64]
  22:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		context->OffsetYChanged(context->Parent, context->OffsetY);
 262              		.loc 3 22 0
 263 0044 7B68     		ldr	r3, [r7, #4]
 264 0046 1B6D     		ldr	r3, [r3, #80]
 265 0048 7A68     		ldr	r2, [r7, #4]
 266 004a 1068     		ldr	r0, [r2]
 267 004c 7A68     		ldr	r2, [r7, #4]
 268 004e 126C     		ldr	r2, [r2, #64]
 269 0050 12B2     		sxth	r2, r2
 270 0052 1146     		mov	r1, r2
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 11


 271 0054 9847     		blx	r3
 272              	.LVL0:
  23:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		if (diffY > 5 || diffY < -5)
 273              		.loc 3 23 0
 274 0056 B7F91230 		ldrsh	r3, [r7, #18]
 275 005a 052B     		cmp	r3, #5
 276 005c 04DC     		bgt	.L16
 277              		.loc 3 23 0 is_stmt 0 discriminator 1
 278 005e B7F91230 		ldrsh	r3, [r7, #18]
 279 0062 13F1050F 		cmn	r3, #5
 280 0066 01DA     		bge	.L15
 281              	.L16:
 282              	.LBB3:
  24:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		{
  25:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 			// Cancel any ongoing button presses
  26:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 			Ft_Esd_TouchTag_SuppressCurrentTags();
 283              		.loc 3 26 0 is_stmt 1
 284 0068 FFF7FEFF 		bl	Ft_Esd_TouchTag_SuppressCurrentTags
 285              	.L15:
 286              	.LBE3:
 287              	.LBE2:
  27:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		}
  28:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
  29:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	int offsetYRange = context->CurrentY - context->Height(context->Parent) + context->Margin(context-
 288              		.loc 3 29 0
 289 006c 7B68     		ldr	r3, [r7, #4]
 290 006e 9C6D     		ldr	r4, [r3, #88]
 291 0070 7B68     		ldr	r3, [r7, #4]
 292 0072 9B6B     		ldr	r3, [r3, #56]
 293 0074 7A68     		ldr	r2, [r7, #4]
 294 0076 1268     		ldr	r2, [r2]
 295 0078 1046     		mov	r0, r2
 296 007a 9847     		blx	r3
 297              	.LVL1:
 298 007c 0346     		mov	r3, r0
 299 007e E41A     		subs	r4, r4, r3
 300 0080 7B68     		ldr	r3, [r7, #4]
 301 0082 5B6C     		ldr	r3, [r3, #68]
 302 0084 7A68     		ldr	r2, [r7, #4]
 303 0086 1268     		ldr	r2, [r2]
 304 0088 1046     		mov	r0, r2
 305 008a 9847     		blx	r3
 306              	.LVL2:
 307 008c 0346     		mov	r3, r0
 308 008e 2344     		add	r3, r3, r4
 309 0090 FB60     		str	r3, [r7, #12]
  30:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	context->OffsetYRange = offsetYRange > 0 ? offsetYRange : 0;
 310              		.loc 3 30 0
 311 0092 FB68     		ldr	r3, [r7, #12]
 312 0094 23EAE372 		bic	r2, r3, r3, asr #31
 313 0098 7B68     		ldr	r3, [r7, #4]
 314 009a 9A64     		str	r2, [r3, #72]
  31:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** }
 315              		.loc 3 31 0
 316 009c 00BF     		nop
 317 009e 1C37     		adds	r7, r7, #28
 318              	.LCFI16:
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 12


 319              		.cfi_def_cfa_offset 12
 320 00a0 BD46     		mov	sp, r7
 321              	.LCFI17:
 322              		.cfi_def_cfa_register 13
 323              		@ sp needed
 324 00a2 90BD     		pop	{r4, r7, pc}
 325              		.cfi_endproc
 326              	.LFE23:
 328              		.section	.text.Ft_Esd_ScrollPanel_Update_Contents,"ax",%progbits
 329              		.align	1
 330              		.global	Ft_Esd_ScrollPanel_Update_Contents
 331              		.syntax unified
 332              		.thumb
 333              		.thumb_func
 334              		.fpu fpv5-sp-d16
 336              	Ft_Esd_ScrollPanel_Update_Contents:
 337              	.LFB24:
  32:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
  33:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** ESD_METHOD(Ft_Esd_ScrollPanel_Update_Contents, Context = Ft_Esd_ScrollPanel)
  34:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** void Ft_Esd_ScrollPanel_Update_Contents(Ft_Esd_ScrollPanel *context)
  35:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** {
 338              		.loc 3 35 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 16
 341              		@ frame_needed = 1, uses_anonymous_args = 0
 342 0000 80B5     		push	{r7, lr}
 343              	.LCFI18:
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 7, -8
 346              		.cfi_offset 14, -4
 347 0002 84B0     		sub	sp, sp, #16
 348              	.LCFI19:
 349              		.cfi_def_cfa_offset 24
 350 0004 00AF     		add	r7, sp, #0
 351              	.LCFI20:
 352              		.cfi_def_cfa_register 7
 353 0006 7860     		str	r0, [r7, #4]
  36:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Esd_LayoutChild *last = context->First;
 354              		.loc 3 36 0
 355 0008 7B68     		ldr	r3, [r7, #4]
 356 000a 1B6E     		ldr	r3, [r3, #96]
 357 000c FB60     		str	r3, [r7, #12]
  37:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	while (last)
 358              		.loc 3 37 0
 359 000e 0FE0     		b	.L18
 360              	.L20:
  38:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
  39:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		context->Current = last;
 361              		.loc 3 39 0
 362 0010 7B68     		ldr	r3, [r7, #4]
 363 0012 FA68     		ldr	r2, [r7, #12]
 364 0014 5A66     		str	r2, [r3, #100]
  40:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		if (last->Update)
 365              		.loc 3 40 0
 366 0016 FB68     		ldr	r3, [r7, #12]
 367 0018 DB68     		ldr	r3, [r3, #12]
 368 001a 002B     		cmp	r3, #0
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 13


 369 001c 05D0     		beq	.L19
  41:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		{
  42:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 			last->Update(last->Child);
 370              		.loc 3 42 0
 371 001e FB68     		ldr	r3, [r7, #12]
 372 0020 DB68     		ldr	r3, [r3, #12]
 373 0022 FA68     		ldr	r2, [r7, #12]
 374 0024 1268     		ldr	r2, [r2]
 375 0026 1046     		mov	r0, r2
 376 0028 9847     		blx	r3
 377              	.LVL3:
 378              	.L19:
  43:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		}
  44:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		last = last->Next;
 379              		.loc 3 44 0
 380 002a FB68     		ldr	r3, [r7, #12]
 381 002c 9B69     		ldr	r3, [r3, #24]
 382 002e FB60     		str	r3, [r7, #12]
 383              	.L18:
  37:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
 384              		.loc 3 37 0
 385 0030 FB68     		ldr	r3, [r7, #12]
 386 0032 002B     		cmp	r3, #0
 387 0034 ECD1     		bne	.L20
  45:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
  46:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** }
 388              		.loc 3 46 0
 389 0036 00BF     		nop
 390 0038 1037     		adds	r7, r7, #16
 391              	.LCFI21:
 392              		.cfi_def_cfa_offset 8
 393 003a BD46     		mov	sp, r7
 394              	.LCFI22:
 395              		.cfi_def_cfa_register 13
 396              		@ sp needed
 397 003c 80BD     		pop	{r7, pc}
 398              		.cfi_endproc
 399              	.LFE24:
 401              		.section	.text.Ft_Esd_ScrollPanel_Render_Contents,"ax",%progbits
 402              		.align	1
 403              		.global	Ft_Esd_ScrollPanel_Render_Contents
 404              		.syntax unified
 405              		.thumb
 406              		.thumb_func
 407              		.fpu fpv5-sp-d16
 409              	Ft_Esd_ScrollPanel_Render_Contents:
 410              	.LFB25:
  47:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
  48:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** ESD_METHOD(Ft_Esd_ScrollPanel_Render_Contents, Context = Ft_Esd_ScrollPanel)
  49:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** void Ft_Esd_ScrollPanel_Render_Contents(Ft_Esd_ScrollPanel *context)
  50:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** {
 411              		.loc 3 50 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 48
 414              		@ frame_needed = 1, uses_anonymous_args = 0
 415 0000 B0B5     		push	{r4, r5, r7, lr}
 416              	.LCFI23:
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 14


 417              		.cfi_def_cfa_offset 16
 418              		.cfi_offset 4, -16
 419              		.cfi_offset 5, -12
 420              		.cfi_offset 7, -8
 421              		.cfi_offset 14, -4
 422 0002 8CB0     		sub	sp, sp, #48
 423              	.LCFI24:
 424              		.cfi_def_cfa_offset 64
 425 0004 00AF     		add	r7, sp, #0
 426              	.LCFI25:
 427              		.cfi_def_cfa_register 7
 428 0006 7860     		str	r0, [r7, #4]
  51:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Gpu_Hal_Context_t *phost = Ft_Esd_Host;
 429              		.loc 3 51 0
 430 0008 784B     		ldr	r3, .L27
 431 000a 1B68     		ldr	r3, [r3]
 432 000c 7B62     		str	r3, [r7, #36]
  52:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Esd_LayoutChild *last = context->First;
 433              		.loc 3 52 0
 434 000e 7B68     		ldr	r3, [r7, #4]
 435 0010 1B6E     		ldr	r3, [r3, #96]
 436 0012 FB62     		str	r3, [r7, #44]
  53:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	context->CurrentY = 0;
 437              		.loc 3 53 0
 438 0014 7B68     		ldr	r3, [r7, #4]
 439 0016 0022     		movs	r2, #0
 440 0018 9A65     		str	r2, [r3, #88]
  54:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	context->CurrentX = 0;
 441              		.loc 3 54 0
 442 001a 7B68     		ldr	r3, [r7, #4]
 443 001c 0022     		movs	r2, #0
 444 001e 5A65     		str	r2, [r3, #84]
  55:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	ft_int16_t boundWidth = context->Width(context->Parent);
 445              		.loc 3 55 0
 446 0020 7B68     		ldr	r3, [r7, #4]
 447 0022 5B6B     		ldr	r3, [r3, #52]
 448 0024 7A68     		ldr	r2, [r7, #4]
 449 0026 1268     		ldr	r2, [r2]
 450 0028 1046     		mov	r0, r2
 451 002a 9847     		blx	r3
 452              	.LVL4:
 453 002c 0346     		mov	r3, r0
 454 002e 7B84     		strh	r3, [r7, #34]	@ movhi
  56:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	ft_int16_t boundHeight = context->Height(context->Parent);
 455              		.loc 3 56 0
 456 0030 7B68     		ldr	r3, [r7, #4]
 457 0032 9B6B     		ldr	r3, [r3, #56]
 458 0034 7A68     		ldr	r2, [r7, #4]
 459 0036 1268     		ldr	r2, [r2]
 460 0038 1046     		mov	r0, r2
 461 003a 9847     		blx	r3
 462              	.LVL5:
 463 003c 0346     		mov	r3, r0
 464 003e 3B84     		strh	r3, [r7, #32]	@ movhi
  57:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	ft_int16_t columns = context->Columns(context->Parent);
 465              		.loc 3 57 0
 466 0040 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 15


 467 0042 DB6B     		ldr	r3, [r3, #60]
 468 0044 7A68     		ldr	r2, [r7, #4]
 469 0046 1268     		ldr	r2, [r2]
 470 0048 1046     		mov	r0, r2
 471 004a 9847     		blx	r3
 472              	.LVL6:
 473 004c 0346     		mov	r3, r0
 474 004e FB83     		strh	r3, [r7, #30]	@ movhi
  58:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	ft_int16_t scissorX = context->X(context->Parent) + FT_ESD_SCROLLPANEL_SCISSOR;
 475              		.loc 3 58 0
 476 0050 7B68     		ldr	r3, [r7, #4]
 477 0052 DB6A     		ldr	r3, [r3, #44]
 478 0054 7A68     		ldr	r2, [r7, #4]
 479 0056 1268     		ldr	r2, [r2]
 480 0058 1046     		mov	r0, r2
 481 005a 9847     		blx	r3
 482              	.LVL7:
 483 005c 0346     		mov	r3, r0
 484 005e 9BB2     		uxth	r3, r3
 485 0060 0233     		adds	r3, r3, #2
 486 0062 9BB2     		uxth	r3, r3
 487 0064 BB83     		strh	r3, [r7, #28]	@ movhi
  59:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	ft_int16_t scissorY = context->Y(context->Parent) + FT_ESD_SCROLLPANEL_SCISSOR;
 488              		.loc 3 59 0
 489 0066 7B68     		ldr	r3, [r7, #4]
 490 0068 1B6B     		ldr	r3, [r3, #48]
 491 006a 7A68     		ldr	r2, [r7, #4]
 492 006c 1268     		ldr	r2, [r2]
 493 006e 1046     		mov	r0, r2
 494 0070 9847     		blx	r3
 495              	.LVL8:
 496 0072 0346     		mov	r3, r0
 497 0074 9BB2     		uxth	r3, r3
 498 0076 0233     		adds	r3, r3, #2
 499 0078 9BB2     		uxth	r3, r3
 500 007a 7B83     		strh	r3, [r7, #26]	@ movhi
  60:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	ft_int16_t scissorWidth = boundWidth - FT_ESD_SCROLLPANEL_SCISSOR * 2;
 501              		.loc 3 60 0
 502 007c 7B8C     		ldrh	r3, [r7, #34]
 503 007e 043B     		subs	r3, r3, #4
 504 0080 9BB2     		uxth	r3, r3
 505 0082 3B83     		strh	r3, [r7, #24]	@ movhi
  61:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	ft_int16_t scissorHeight = boundHeight - FT_ESD_SCROLLPANEL_SCISSOR * 2;
 506              		.loc 3 61 0
 507 0084 3B8C     		ldrh	r3, [r7, #32]
 508 0086 043B     		subs	r3, r3, #4
 509 0088 9BB2     		uxth	r3, r3
 510 008a FB82     		strh	r3, [r7, #22]	@ movhi
  62:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Esd_Dl_SAVE_CONTEXT();
 511              		.loc 3 62 0
 512 008c FFF7FEFF 		bl	Ft_Esd_Dl_SAVE_CONTEXT
  63:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_XY(scissorX, scissorY));
 513              		.loc 3 63 0
 514 0090 BB8B     		ldrh	r3, [r7, #28]
 515 0092 DA02     		lsls	r2, r3, #11
 516 0094 564B     		ldr	r3, .L27+4
 517 0096 1340     		ands	r3, r3, r2
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 16


 518 0098 7A8B     		ldrh	r2, [r7, #26]
 519 009a C2F30A02 		ubfx	r2, r2, #0, #11
 520 009e 1343     		orrs	r3, r3, r2
 521 00a0 43F0D853 		orr	r3, r3, #452984832
 522 00a4 1946     		mov	r1, r3
 523 00a6 786A     		ldr	r0, [r7, #36]
 524 00a8 FFF7FEFF 		bl	Ft_Gpu_Hal_WrCmd32
  64:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Gpu_Hal_WrCmd32(phost, SCISSOR_SIZE(scissorWidth, scissorHeight));
 525              		.loc 3 64 0
 526 00ac 3B8B     		ldrh	r3, [r7, #24]
 527 00ae 1A03     		lsls	r2, r3, #12
 528 00b0 504B     		ldr	r3, .L27+8
 529 00b2 1340     		ands	r3, r3, r2
 530 00b4 FA8A     		ldrh	r2, [r7, #22]
 531 00b6 C2F30B02 		ubfx	r2, r2, #0, #12
 532 00ba 1343     		orrs	r3, r3, r2
 533 00bc 43F0E053 		orr	r3, r3, #469762048
 534 00c0 1946     		mov	r1, r3
 535 00c2 786A     		ldr	r0, [r7, #36]
 536 00c4 FFF7FEFF 		bl	Ft_Gpu_Hal_WrCmd32
  65:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	int count = 0;
 537              		.loc 3 65 0
 538 00c8 0023     		movs	r3, #0
 539 00ca BB62     		str	r3, [r7, #40]
  66:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	while (last)
 540              		.loc 3 66 0
 541 00cc 84E0     		b	.L22
 542              	.L26:
  67:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
  68:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		context->Current = last;
 543              		.loc 3 68 0
 544 00ce 7B68     		ldr	r3, [r7, #4]
 545 00d0 FA6A     		ldr	r2, [r7, #44]
 546 00d2 5A66     		str	r2, [r3, #100]
  69:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		if (last->Render)
 547              		.loc 3 69 0
 548 00d4 FB6A     		ldr	r3, [r7, #44]
 549 00d6 1B69     		ldr	r3, [r3, #16]
 550 00d8 002B     		cmp	r3, #0
 551 00da 77D0     		beq	.L23
  70:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		{
  71:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		    if ( ((count+1)%(columns))==0 ){
 552              		.loc 3 71 0
 553 00dc BB6A     		ldr	r3, [r7, #40]
 554 00de 0133     		adds	r3, r3, #1
 555 00e0 B7F91E20 		ldrsh	r2, [r7, #30]
 556 00e4 93FBF2F1 		sdiv	r1, r3, r2
 557 00e8 02FB01F2 		mul	r2, r2, r1
 558 00ec 9B1A     		subs	r3, r3, r2
 559 00ee 002B     		cmp	r3, #0
 560 00f0 3CD1     		bne	.L24
 561              	.LBB4:
  72:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				ft_int16_t height = last->Height(context->Parent);
 562              		.loc 3 72 0
 563 00f2 FB6A     		ldr	r3, [r7, #44]
 564 00f4 9B68     		ldr	r3, [r3, #8]
 565 00f6 7A68     		ldr	r2, [r7, #4]
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 17


 566 00f8 1268     		ldr	r2, [r2]
 567 00fa 1046     		mov	r0, r2
 568 00fc 9847     		blx	r3
 569              	.LVL9:
 570 00fe 0346     		mov	r3, r0
 571 0100 BB81     		strh	r3, [r7, #12]	@ movhi
  73:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				ft_int16_t bottom = context->CurrentY + height;
 572              		.loc 3 73 0
 573 0102 7B68     		ldr	r3, [r7, #4]
 574 0104 9B6D     		ldr	r3, [r3, #88]
 575 0106 9AB2     		uxth	r2, r3
 576 0108 BB89     		ldrh	r3, [r7, #12]
 577 010a 1344     		add	r3, r3, r2
 578 010c 9BB2     		uxth	r3, r3
 579 010e 7B81     		strh	r3, [r7, #10]	@ movhi
  74:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				if (bottom >= context->OffsetY && context->CurrentY < (context->OffsetY + boundHeight - context
 580              		.loc 3 74 0
 581 0110 B7F90A20 		ldrsh	r2, [r7, #10]
 582 0114 7B68     		ldr	r3, [r7, #4]
 583 0116 1B6C     		ldr	r3, [r3, #64]
 584 0118 9A42     		cmp	r2, r3
 585 011a 17DB     		blt	.L25
 586              		.loc 3 74 0 is_stmt 0 discriminator 1
 587 011c 7B68     		ldr	r3, [r7, #4]
 588 011e 9C6D     		ldr	r4, [r3, #88]
 589 0120 7B68     		ldr	r3, [r7, #4]
 590 0122 1A6C     		ldr	r2, [r3, #64]
 591 0124 B7F92030 		ldrsh	r3, [r7, #32]
 592 0128 D518     		adds	r5, r2, r3
 593 012a 7B68     		ldr	r3, [r7, #4]
 594 012c 5B6C     		ldr	r3, [r3, #68]
 595 012e 7A68     		ldr	r2, [r7, #4]
 596 0130 1268     		ldr	r2, [r2]
 597 0132 1046     		mov	r0, r2
 598 0134 9847     		blx	r3
 599              	.LVL10:
 600 0136 0346     		mov	r3, r0
 601 0138 5B00     		lsls	r3, r3, #1
 602 013a EB1A     		subs	r3, r5, r3
 603 013c 9C42     		cmp	r4, r3
 604 013e 05DA     		bge	.L25
  75:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				{
  76:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 					last->Render(last->Child);
 605              		.loc 3 76 0 is_stmt 1
 606 0140 FB6A     		ldr	r3, [r7, #44]
 607 0142 1B69     		ldr	r3, [r3, #16]
 608 0144 FA6A     		ldr	r2, [r7, #44]
 609 0146 1268     		ldr	r2, [r2]
 610 0148 1046     		mov	r0, r2
 611 014a 9847     		blx	r3
 612              	.LVL11:
 613              	.L25:
  77:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				}
  78:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				context->CurrentY = bottom + context->Margin(context->Parent);
 614              		.loc 3 78 0
 615 014c B7F90A40 		ldrsh	r4, [r7, #10]
 616 0150 7B68     		ldr	r3, [r7, #4]
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 18


 617 0152 5B6C     		ldr	r3, [r3, #68]
 618 0154 7A68     		ldr	r2, [r7, #4]
 619 0156 1268     		ldr	r2, [r2]
 620 0158 1046     		mov	r0, r2
 621 015a 9847     		blx	r3
 622              	.LVL12:
 623 015c 0346     		mov	r3, r0
 624 015e E218     		adds	r2, r4, r3
 625 0160 7B68     		ldr	r3, [r7, #4]
 626 0162 9A65     		str	r2, [r3, #88]
  79:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				context->CurrentX = 0;
 627              		.loc 3 79 0
 628 0164 7B68     		ldr	r3, [r7, #4]
 629 0166 0022     		movs	r2, #0
 630 0168 5A65     		str	r2, [r3, #84]
 631              	.LBE4:
 632 016a 2FE0     		b	.L23
 633              	.L24:
 634              	.LBB5:
  80:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		    }
  81:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 			else
  82:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		    {
  83:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				ft_int16_t width = last->Width(context->Parent);
 635              		.loc 3 83 0
 636 016c FB6A     		ldr	r3, [r7, #44]
 637 016e 5B68     		ldr	r3, [r3, #4]
 638 0170 7A68     		ldr	r2, [r7, #4]
 639 0172 1268     		ldr	r2, [r2]
 640 0174 1046     		mov	r0, r2
 641 0176 9847     		blx	r3
 642              	.LVL13:
 643 0178 0346     		mov	r3, r0
 644 017a BB82     		strh	r3, [r7, #20]	@ movhi
  84:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				ft_int16_t right = context->CurrentX + width;
 645              		.loc 3 84 0
 646 017c 7B68     		ldr	r3, [r7, #4]
 647 017e 5B6D     		ldr	r3, [r3, #84]
 648 0180 9AB2     		uxth	r2, r3
 649 0182 BB8A     		ldrh	r3, [r7, #20]
 650 0184 1344     		add	r3, r3, r2
 651 0186 9BB2     		uxth	r3, r3
 652 0188 7B82     		strh	r3, [r7, #18]	@ movhi
  85:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				ft_int16_t height = last->Height(context->Parent);
 653              		.loc 3 85 0
 654 018a FB6A     		ldr	r3, [r7, #44]
 655 018c 9B68     		ldr	r3, [r3, #8]
 656 018e 7A68     		ldr	r2, [r7, #4]
 657 0190 1268     		ldr	r2, [r2]
 658 0192 1046     		mov	r0, r2
 659 0194 9847     		blx	r3
 660              	.LVL14:
 661 0196 0346     		mov	r3, r0
 662 0198 3B82     		strh	r3, [r7, #16]	@ movhi
  86:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				ft_int16_t bottom = context->CurrentY + height;
 663              		.loc 3 86 0
 664 019a 7B68     		ldr	r3, [r7, #4]
 665 019c 9B6D     		ldr	r3, [r3, #88]
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 19


 666 019e 9AB2     		uxth	r2, r3
 667 01a0 3B8A     		ldrh	r3, [r7, #16]
 668 01a2 1344     		add	r3, r3, r2
 669 01a4 9BB2     		uxth	r3, r3
 670 01a6 FB81     		strh	r3, [r7, #14]	@ movhi
  87:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				last->Render(last->Child);
 671              		.loc 3 87 0
 672 01a8 FB6A     		ldr	r3, [r7, #44]
 673 01aa 1B69     		ldr	r3, [r3, #16]
 674 01ac FA6A     		ldr	r2, [r7, #44]
 675 01ae 1268     		ldr	r2, [r2]
 676 01b0 1046     		mov	r0, r2
 677 01b2 9847     		blx	r3
 678              	.LVL15:
  88:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 				context->CurrentX = right + context->Margin(context->Parent);
 679              		.loc 3 88 0
 680 01b4 B7F91240 		ldrsh	r4, [r7, #18]
 681 01b8 7B68     		ldr	r3, [r7, #4]
 682 01ba 5B6C     		ldr	r3, [r3, #68]
 683 01bc 7A68     		ldr	r2, [r7, #4]
 684 01be 1268     		ldr	r2, [r2]
 685 01c0 1046     		mov	r0, r2
 686 01c2 9847     		blx	r3
 687              	.LVL16:
 688 01c4 0346     		mov	r3, r0
 689 01c6 E218     		adds	r2, r4, r3
 690 01c8 7B68     		ldr	r3, [r7, #4]
 691 01ca 5A65     		str	r2, [r3, #84]
 692              	.L23:
 693              	.LBE5:
  89:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		    }
  90:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		}
  91:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		last = last->Next;
 694              		.loc 3 91 0
 695 01cc FB6A     		ldr	r3, [r7, #44]
 696 01ce 9B69     		ldr	r3, [r3, #24]
 697 01d0 FB62     		str	r3, [r7, #44]
  92:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		count++;
 698              		.loc 3 92 0
 699 01d2 BB6A     		ldr	r3, [r7, #40]
 700 01d4 0133     		adds	r3, r3, #1
 701 01d6 BB62     		str	r3, [r7, #40]
 702              	.L22:
  66:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
 703              		.loc 3 66 0
 704 01d8 FB6A     		ldr	r3, [r7, #44]
 705 01da 002B     		cmp	r3, #0
 706 01dc 7FF477AF 		bne	.L26
  93:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
  94:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Esd_Dl_RESTORE_CONTEXT();
 707              		.loc 3 94 0
 708 01e0 FFF7FEFF 		bl	Ft_Esd_Dl_RESTORE_CONTEXT
  95:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** }
 709              		.loc 3 95 0
 710 01e4 00BF     		nop
 711 01e6 3037     		adds	r7, r7, #48
 712              	.LCFI26:
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 20


 713              		.cfi_def_cfa_offset 16
 714 01e8 BD46     		mov	sp, r7
 715              	.LCFI27:
 716              		.cfi_def_cfa_register 13
 717              		@ sp needed
 718 01ea B0BD     		pop	{r4, r5, r7, pc}
 719              	.L28:
 720              		.align	2
 721              	.L27:
 722 01ec 00000000 		.word	Ft_Esd_Host
 723 01f0 00F83F00 		.word	4192256
 724 01f4 00F0FF00 		.word	16773120
 725              		.cfi_endproc
 726              	.LFE25:
 728              		.section	.text.Ft_Esd_ScrollPanel_Add,"ax",%progbits
 729              		.align	1
 730              		.global	Ft_Esd_ScrollPanel_Add
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 734              		.fpu fpv5-sp-d16
 736              	Ft_Esd_ScrollPanel_Add:
 737              	.LFB26:
  96:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
  97:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** void Ft_Esd_ScrollPanel_Add(Ft_Esd_ScrollPanel *context, Ft_Esd_LayoutChild *child)
  98:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** {
 738              		.loc 3 98 0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 16
 741              		@ frame_needed = 1, uses_anonymous_args = 0
 742              		@ link register save eliminated.
 743 0000 80B4     		push	{r7}
 744              	.LCFI28:
 745              		.cfi_def_cfa_offset 4
 746              		.cfi_offset 7, -4
 747 0002 85B0     		sub	sp, sp, #20
 748              	.LCFI29:
 749              		.cfi_def_cfa_offset 24
 750 0004 00AF     		add	r7, sp, #0
 751              	.LCFI30:
 752              		.cfi_def_cfa_register 7
 753 0006 7860     		str	r0, [r7, #4]
 754 0008 3960     		str	r1, [r7]
  99:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Esd_LayoutChild *last = context->First;
 755              		.loc 3 99 0
 756 000a 7B68     		ldr	r3, [r7, #4]
 757 000c 1B6E     		ldr	r3, [r3, #96]
 758 000e FB60     		str	r3, [r7, #12]
 100:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	if (last)
 759              		.loc 3 100 0
 760 0010 FB68     		ldr	r3, [r7, #12]
 761 0012 002B     		cmp	r3, #0
 762 0014 0ED0     		beq	.L30
 101:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
 102:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		while (last->Next)
 763              		.loc 3 102 0
 764 0016 02E0     		b	.L31
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 21


 765              	.L32:
 103:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		{
 104:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 			last = last->Next;
 766              		.loc 3 104 0
 767 0018 FB68     		ldr	r3, [r7, #12]
 768 001a 9B69     		ldr	r3, [r3, #24]
 769 001c FB60     		str	r3, [r7, #12]
 770              	.L31:
 102:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		{
 771              		.loc 3 102 0
 772 001e FB68     		ldr	r3, [r7, #12]
 773 0020 9B69     		ldr	r3, [r3, #24]
 774 0022 002B     		cmp	r3, #0
 775 0024 F8D1     		bne	.L32
 105:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		}
 106:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		last->Next = child;
 776              		.loc 3 106 0
 777 0026 FB68     		ldr	r3, [r7, #12]
 778 0028 3A68     		ldr	r2, [r7]
 779 002a 9A61     		str	r2, [r3, #24]
 107:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		child->Previous = last;
 780              		.loc 3 107 0
 781 002c 3B68     		ldr	r3, [r7]
 782 002e FA68     		ldr	r2, [r7, #12]
 783 0030 5A61     		str	r2, [r3, #20]
 108:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
 109:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	else
 110:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
 111:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		context->First = child;
 112:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
 113:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** }
 784              		.loc 3 113 0
 785 0032 02E0     		b	.L34
 786              	.L30:
 111:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
 787              		.loc 3 111 0
 788 0034 7B68     		ldr	r3, [r7, #4]
 789 0036 3A68     		ldr	r2, [r7]
 790 0038 1A66     		str	r2, [r3, #96]
 791              	.L34:
 792              		.loc 3 113 0
 793 003a 00BF     		nop
 794 003c 1437     		adds	r7, r7, #20
 795              	.LCFI31:
 796              		.cfi_def_cfa_offset 4
 797 003e BD46     		mov	sp, r7
 798              	.LCFI32:
 799              		.cfi_def_cfa_register 13
 800              		@ sp needed
 801 0040 5DF8047B 		ldr	r7, [sp], #4
 802              	.LCFI33:
 803              		.cfi_restore 7
 804              		.cfi_def_cfa_offset 0
 805 0044 7047     		bx	lr
 806              		.cfi_endproc
 807              	.LFE26:
 809              		.section	.text.Ft_Esd_ScrollPanel_Remove,"ax",%progbits
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 22


 810              		.align	1
 811              		.global	Ft_Esd_ScrollPanel_Remove
 812              		.syntax unified
 813              		.thumb
 814              		.thumb_func
 815              		.fpu fpv5-sp-d16
 817              	Ft_Esd_ScrollPanel_Remove:
 818              	.LFB27:
 114:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
 115:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** void Ft_Esd_ScrollPanel_Remove(Ft_Esd_ScrollPanel *context, Ft_Esd_LayoutChild *child)
 116:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** {
 819              		.loc 3 116 0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 16
 822              		@ frame_needed = 1, uses_anonymous_args = 0
 823              		@ link register save eliminated.
 824 0000 80B4     		push	{r7}
 825              	.LCFI34:
 826              		.cfi_def_cfa_offset 4
 827              		.cfi_offset 7, -4
 828 0002 85B0     		sub	sp, sp, #20
 829              	.LCFI35:
 830              		.cfi_def_cfa_offset 24
 831 0004 00AF     		add	r7, sp, #0
 832              	.LCFI36:
 833              		.cfi_def_cfa_register 7
 834 0006 7860     		str	r0, [r7, #4]
 835 0008 3960     		str	r1, [r7]
 117:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Esd_LayoutChild *previous = child->Previous;
 836              		.loc 3 117 0
 837 000a 3B68     		ldr	r3, [r7]
 838 000c 5B69     		ldr	r3, [r3, #20]
 839 000e FB60     		str	r3, [r7, #12]
 118:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	Ft_Esd_LayoutChild *next = child->Next;
 840              		.loc 3 118 0
 841 0010 3B68     		ldr	r3, [r7]
 842 0012 9B69     		ldr	r3, [r3, #24]
 843 0014 BB60     		str	r3, [r7, #8]
 119:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	if (previous)
 844              		.loc 3 119 0
 845 0016 FB68     		ldr	r3, [r7, #12]
 846 0018 002B     		cmp	r3, #0
 847 001a 02D0     		beq	.L36
 120:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
 121:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		previous->Next = next;
 848              		.loc 3 121 0
 849 001c FB68     		ldr	r3, [r7, #12]
 850 001e BA68     		ldr	r2, [r7, #8]
 851 0020 9A61     		str	r2, [r3, #24]
 852              	.L36:
 122:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
 123:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	if (next)
 853              		.loc 3 123 0
 854 0022 BB68     		ldr	r3, [r7, #8]
 855 0024 002B     		cmp	r3, #0
 856 0026 02D0     		beq	.L37
 124:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 23


 125:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		next->Previous = previous;
 857              		.loc 3 125 0
 858 0028 BB68     		ldr	r3, [r7, #8]
 859 002a FA68     		ldr	r2, [r7, #12]
 860 002c 5A61     		str	r2, [r3, #20]
 861              	.L37:
 126:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
 127:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	if (context->Current == child)
 862              		.loc 3 127 0
 863 002e 7B68     		ldr	r3, [r7, #4]
 864 0030 5B6E     		ldr	r3, [r3, #100]
 865 0032 3A68     		ldr	r2, [r7]
 866 0034 9A42     		cmp	r2, r3
 867 0036 03D1     		bne	.L38
 128:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
 129:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		context->Current = child->Previous;
 868              		.loc 3 129 0
 869 0038 3B68     		ldr	r3, [r7]
 870 003a 5A69     		ldr	r2, [r3, #20]
 871 003c 7B68     		ldr	r3, [r7, #4]
 872 003e 5A66     		str	r2, [r3, #100]
 873              	.L38:
 130:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
 131:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	if (context->First == child)
 874              		.loc 3 131 0
 875 0040 7B68     		ldr	r3, [r7, #4]
 876 0042 1B6E     		ldr	r3, [r3, #96]
 877 0044 3A68     		ldr	r2, [r7]
 878 0046 9A42     		cmp	r2, r3
 879 0048 03D1     		bne	.L40
 132:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	{
 133:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 		context->First = child->Next;
 880              		.loc 3 133 0
 881 004a 3B68     		ldr	r3, [r7]
 882 004c 9A69     		ldr	r2, [r3, #24]
 883 004e 7B68     		ldr	r3, [r7, #4]
 884 0050 1A66     		str	r2, [r3, #96]
 885              	.L40:
 134:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	}
 135:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** }
 886              		.loc 3 135 0
 887 0052 00BF     		nop
 888 0054 1437     		adds	r7, r7, #20
 889              	.LCFI37:
 890              		.cfi_def_cfa_offset 4
 891 0056 BD46     		mov	sp, r7
 892              	.LCFI38:
 893              		.cfi_def_cfa_register 13
 894              		@ sp needed
 895 0058 5DF8047B 		ldr	r7, [sp], #4
 896              	.LCFI39:
 897              		.cfi_restore 7
 898              		.cfi_def_cfa_offset 0
 899 005c 7047     		bx	lr
 900              		.cfi_endproc
 901              	.LFE27:
 903              		.section	.text.Ft_Esd_ScrollPanel_ChildX,"ax",%progbits
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 24


 904              		.align	1
 905              		.global	Ft_Esd_ScrollPanel_ChildX
 906              		.syntax unified
 907              		.thumb
 908              		.thumb_func
 909              		.fpu fpv5-sp-d16
 911              	Ft_Esd_ScrollPanel_ChildX:
 912              	.LFB28:
 136:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
 137:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** ft_int16_t Ft_Esd_ScrollPanel_ChildX(Ft_Esd_ScrollPanel *context)
 138:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** {
 913              		.loc 3 138 0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 8
 916              		@ frame_needed = 1, uses_anonymous_args = 0
 917 0000 90B5     		push	{r4, r7, lr}
 918              	.LCFI40:
 919              		.cfi_def_cfa_offset 12
 920              		.cfi_offset 4, -12
 921              		.cfi_offset 7, -8
 922              		.cfi_offset 14, -4
 923 0002 83B0     		sub	sp, sp, #12
 924              	.LCFI41:
 925              		.cfi_def_cfa_offset 24
 926 0004 00AF     		add	r7, sp, #0
 927              	.LCFI42:
 928              		.cfi_def_cfa_register 7
 929 0006 7860     		str	r0, [r7, #4]
 139:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	return context->X(context->Parent) + context->CurrentX + context->Margin(context->Parent);
 930              		.loc 3 139 0
 931 0008 7B68     		ldr	r3, [r7, #4]
 932 000a DB6A     		ldr	r3, [r3, #44]
 933 000c 7A68     		ldr	r2, [r7, #4]
 934 000e 1268     		ldr	r2, [r2]
 935 0010 1046     		mov	r0, r2
 936 0012 9847     		blx	r3
 937              	.LVL17:
 938 0014 0346     		mov	r3, r0
 939 0016 9AB2     		uxth	r2, r3
 940 0018 7B68     		ldr	r3, [r7, #4]
 941 001a 5B6D     		ldr	r3, [r3, #84]
 942 001c 9BB2     		uxth	r3, r3
 943 001e 1344     		add	r3, r3, r2
 944 0020 9CB2     		uxth	r4, r3
 945 0022 7B68     		ldr	r3, [r7, #4]
 946 0024 5B6C     		ldr	r3, [r3, #68]
 947 0026 7A68     		ldr	r2, [r7, #4]
 948 0028 1268     		ldr	r2, [r2]
 949 002a 1046     		mov	r0, r2
 950 002c 9847     		blx	r3
 951              	.LVL18:
 952 002e 0346     		mov	r3, r0
 953 0030 9BB2     		uxth	r3, r3
 954 0032 2344     		add	r3, r3, r4
 955 0034 9BB2     		uxth	r3, r3
 956 0036 1BB2     		sxth	r3, r3
 140:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** }
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 25


 957              		.loc 3 140 0
 958 0038 1846     		mov	r0, r3
 959 003a 0C37     		adds	r7, r7, #12
 960              	.LCFI43:
 961              		.cfi_def_cfa_offset 12
 962 003c BD46     		mov	sp, r7
 963              	.LCFI44:
 964              		.cfi_def_cfa_register 13
 965              		@ sp needed
 966 003e 90BD     		pop	{r4, r7, pc}
 967              		.cfi_endproc
 968              	.LFE28:
 970              		.section	.text.Ft_Esd_ScrollPanel_ChildY,"ax",%progbits
 971              		.align	1
 972              		.global	Ft_Esd_ScrollPanel_ChildY
 973              		.syntax unified
 974              		.thumb
 975              		.thumb_func
 976              		.fpu fpv5-sp-d16
 978              	Ft_Esd_ScrollPanel_ChildY:
 979              	.LFB29:
 141:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
 142:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** ft_int16_t Ft_Esd_ScrollPanel_ChildY(Ft_Esd_ScrollPanel *context)
 143:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** {
 980              		.loc 3 143 0
 981              		.cfi_startproc
 982              		@ args = 0, pretend = 0, frame = 8
 983              		@ frame_needed = 1, uses_anonymous_args = 0
 984 0000 90B5     		push	{r4, r7, lr}
 985              	.LCFI45:
 986              		.cfi_def_cfa_offset 12
 987              		.cfi_offset 4, -12
 988              		.cfi_offset 7, -8
 989              		.cfi_offset 14, -4
 990 0002 83B0     		sub	sp, sp, #12
 991              	.LCFI46:
 992              		.cfi_def_cfa_offset 24
 993 0004 00AF     		add	r7, sp, #0
 994              	.LCFI47:
 995              		.cfi_def_cfa_register 7
 996 0006 7860     		str	r0, [r7, #4]
 144:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	return context->Y(context->Parent) + context->CurrentY - context->OffsetY + context->Margin(contex
 997              		.loc 3 144 0
 998 0008 7B68     		ldr	r3, [r7, #4]
 999 000a 1B6B     		ldr	r3, [r3, #48]
 1000 000c 7A68     		ldr	r2, [r7, #4]
 1001 000e 1268     		ldr	r2, [r2]
 1002 0010 1046     		mov	r0, r2
 1003 0012 9847     		blx	r3
 1004              	.LVL19:
 1005 0014 0346     		mov	r3, r0
 1006 0016 9AB2     		uxth	r2, r3
 1007 0018 7B68     		ldr	r3, [r7, #4]
 1008 001a 9B6D     		ldr	r3, [r3, #88]
 1009 001c 9BB2     		uxth	r3, r3
 1010 001e 1344     		add	r3, r3, r2
 1011 0020 9AB2     		uxth	r2, r3
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 26


 1012 0022 7B68     		ldr	r3, [r7, #4]
 1013 0024 1B6C     		ldr	r3, [r3, #64]
 1014 0026 9BB2     		uxth	r3, r3
 1015 0028 D31A     		subs	r3, r2, r3
 1016 002a 9CB2     		uxth	r4, r3
 1017 002c 7B68     		ldr	r3, [r7, #4]
 1018 002e 5B6C     		ldr	r3, [r3, #68]
 1019 0030 7A68     		ldr	r2, [r7, #4]
 1020 0032 1268     		ldr	r2, [r2]
 1021 0034 1046     		mov	r0, r2
 1022 0036 9847     		blx	r3
 1023              	.LVL20:
 1024 0038 0346     		mov	r3, r0
 1025 003a 9BB2     		uxth	r3, r3
 1026 003c 2344     		add	r3, r3, r4
 1027 003e 9BB2     		uxth	r3, r3
 1028 0040 1BB2     		sxth	r3, r3
 145:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** }
 1029              		.loc 3 145 0
 1030 0042 1846     		mov	r0, r3
 1031 0044 0C37     		adds	r7, r7, #12
 1032              	.LCFI48:
 1033              		.cfi_def_cfa_offset 12
 1034 0046 BD46     		mov	sp, r7
 1035              	.LCFI49:
 1036              		.cfi_def_cfa_register 13
 1037              		@ sp needed
 1038 0048 90BD     		pop	{r4, r7, pc}
 1039              		.cfi_endproc
 1040              	.LFE29:
 1042              		.section	.text.Ft_Esd_ScrollPanel_ChildWidth,"ax",%progbits
 1043              		.align	1
 1044              		.global	Ft_Esd_ScrollPanel_ChildWidth
 1045              		.syntax unified
 1046              		.thumb
 1047              		.thumb_func
 1048              		.fpu fpv5-sp-d16
 1050              	Ft_Esd_ScrollPanel_ChildWidth:
 1051              	.LFB30:
 146:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
 147:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** ft_int16_t Ft_Esd_ScrollPanel_ChildWidth(Ft_Esd_ScrollPanel *context)
 148:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** {
 1052              		.loc 3 148 0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 8
 1055              		@ frame_needed = 1, uses_anonymous_args = 0
 1056 0000 90B5     		push	{r4, r7, lr}
 1057              	.LCFI50:
 1058              		.cfi_def_cfa_offset 12
 1059              		.cfi_offset 4, -12
 1060              		.cfi_offset 7, -8
 1061              		.cfi_offset 14, -4
 1062 0002 83B0     		sub	sp, sp, #12
 1063              	.LCFI51:
 1064              		.cfi_def_cfa_offset 24
 1065 0004 00AF     		add	r7, sp, #0
 1066              	.LCFI52:
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 27


 1067              		.cfi_def_cfa_register 7
 1068 0006 7860     		str	r0, [r7, #4]
 149:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	return context->Width(context->Parent) - (context->Margin(context->Parent) * 2);
 1069              		.loc 3 149 0
 1070 0008 7B68     		ldr	r3, [r7, #4]
 1071 000a 5B6B     		ldr	r3, [r3, #52]
 1072 000c 7A68     		ldr	r2, [r7, #4]
 1073 000e 1268     		ldr	r2, [r2]
 1074 0010 1046     		mov	r0, r2
 1075 0012 9847     		blx	r3
 1076              	.LVL21:
 1077 0014 0346     		mov	r3, r0
 1078 0016 9CB2     		uxth	r4, r3
 1079 0018 7B68     		ldr	r3, [r7, #4]
 1080 001a 5B6C     		ldr	r3, [r3, #68]
 1081 001c 7A68     		ldr	r2, [r7, #4]
 1082 001e 1268     		ldr	r2, [r2]
 1083 0020 1046     		mov	r0, r2
 1084 0022 9847     		blx	r3
 1085              	.LVL22:
 1086 0024 0346     		mov	r3, r0
 1087 0026 9BB2     		uxth	r3, r3
 1088 0028 5B00     		lsls	r3, r3, #1
 1089 002a 9BB2     		uxth	r3, r3
 1090 002c E31A     		subs	r3, r4, r3
 1091 002e 9BB2     		uxth	r3, r3
 1092 0030 1BB2     		sxth	r3, r3
 150:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** }
 1093              		.loc 3 150 0
 1094 0032 1846     		mov	r0, r3
 1095 0034 0C37     		adds	r7, r7, #12
 1096              	.LCFI53:
 1097              		.cfi_def_cfa_offset 12
 1098 0036 BD46     		mov	sp, r7
 1099              	.LCFI54:
 1100              		.cfi_def_cfa_register 13
 1101              		@ sp needed
 1102 0038 90BD     		pop	{r4, r7, pc}
 1103              		.cfi_endproc
 1104              	.LFE30:
 1106              		.section	.text.Ft_Esd_ScrollPanel_ChildHeight,"ax",%progbits
 1107              		.align	1
 1108              		.global	Ft_Esd_ScrollPanel_ChildHeight
 1109              		.syntax unified
 1110              		.thumb
 1111              		.thumb_func
 1112              		.fpu fpv5-sp-d16
 1114              	Ft_Esd_ScrollPanel_ChildHeight:
 1115              	.LFB31:
 151:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 
 152:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** ft_int16_t Ft_Esd_ScrollPanel_ChildHeight(Ft_Esd_ScrollPanel *context)
 153:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** {
 1116              		.loc 3 153 0
 1117              		.cfi_startproc
 1118              		@ args = 0, pretend = 0, frame = 8
 1119              		@ frame_needed = 1, uses_anonymous_args = 0
 1120 0000 80B5     		push	{r7, lr}
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 28


 1121              	.LCFI55:
 1122              		.cfi_def_cfa_offset 8
 1123              		.cfi_offset 7, -8
 1124              		.cfi_offset 14, -4
 1125 0002 82B0     		sub	sp, sp, #8
 1126              	.LCFI56:
 1127              		.cfi_def_cfa_offset 16
 1128 0004 00AF     		add	r7, sp, #0
 1129              	.LCFI57:
 1130              		.cfi_def_cfa_register 7
 1131 0006 7860     		str	r0, [r7, #4]
 154:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** 	return context->Current->Height(context->Parent);
 1132              		.loc 3 154 0
 1133 0008 7B68     		ldr	r3, [r7, #4]
 1134 000a 5B6E     		ldr	r3, [r3, #100]
 1135 000c 9B68     		ldr	r3, [r3, #8]
 1136 000e 7A68     		ldr	r2, [r7, #4]
 1137 0010 1268     		ldr	r2, [r2]
 1138 0012 1046     		mov	r0, r2
 1139 0014 9847     		blx	r3
 1140              	.LVL23:
 1141 0016 0346     		mov	r3, r0
 155:FT_Esd_Widgets/Ft_Esd_ScrollPanel.c **** }
 1142              		.loc 3 155 0
 1143 0018 1846     		mov	r0, r3
 1144 001a 0837     		adds	r7, r7, #8
 1145              	.LCFI58:
 1146              		.cfi_def_cfa_offset 8
 1147 001c BD46     		mov	sp, r7
 1148              	.LCFI59:
 1149              		.cfi_def_cfa_register 13
 1150              		@ sp needed
 1151 001e 80BD     		pop	{r7, pc}
 1152              		.cfi_endproc
 1153              	.LFE31:
 1155              		.text
 1156              	.Letext0:
 1157              		.file 4 "FT_Eve_Hal/FT_DataTypes.h"
 1158              		.file 5 "/usr/local/Cellar/arm-none-eabi-gcc/20180627/arm-none-eabi/include/sys/lock.h"
 1159              		.file 6 "/usr/local/Cellar/arm-none-eabi-gcc/20180627/arm-none-eabi/include/sys/_types.h"
 1160              		.file 7 "/usr/local/Cellar/arm-none-eabi-gcc/20180627/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h
 1161              		.file 8 "/usr/local/Cellar/arm-none-eabi-gcc/20180627/arm-none-eabi/include/sys/unistd.h"
 1162              		.file 9 "/usr/local/Cellar/arm-none-eabi-gcc/20180627/arm-none-eabi/include/sys/reent.h"
 1163              		.file 10 "/usr/local/Cellar/arm-none-eabi-gcc/20180627/arm-none-eabi/include/stdlib.h"
 1164              		.file 11 "FT_Eve_Hal/FT_Gpu_Hal.h"
 1165              		.file 12 "FT_Esd_Framework/Ft_Esd.h"
 1166              		.file 13 "FT_Esd_Widgets/Ft_Esd_Layout.h"
 1167              		.file 14 "FT_Esd_Widgets/Ft_Esd_Theme.h"
 1168              		.file 15 "FT_Esd_Widgets/Ft_Esd_TouchArea.h"
 1169              		.file 16 "FT_Esd_Widgets/Ft_Esd_ScrollPanel.h"
 1170              		.file 17 "FT_Esd_Framework/Ft_Esd_GpuAlloc.h"
ARM GAS  /var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Ft_Esd_ScrollPanel.c
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:18     .text.Ft_Esd_BitmapCell_GetInfo:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:24     .text.Ft_Esd_BitmapCell_GetInfo:0000000000000000 Ft_Esd_BitmapCell_GetInfo
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:73     .text.Ft_Esd_Dl_SAVE_CONTEXT:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:79     .text.Ft_Esd_Dl_SAVE_CONTEXT:0000000000000000 Ft_Esd_Dl_SAVE_CONTEXT
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:145    .text.Ft_Esd_Dl_SAVE_CONTEXT:000000000000004c $d
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:152    .text.Ft_Esd_Dl_RESTORE_CONTEXT:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:158    .text.Ft_Esd_Dl_RESTORE_CONTEXT:0000000000000000 Ft_Esd_Dl_RESTORE_CONTEXT
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:197    .text.Ft_Esd_Dl_RESTORE_CONTEXT:000000000000002c $d
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:203    .text.Ft_Esd_ScrollPanel_Update_Scroll:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:210    .text.Ft_Esd_ScrollPanel_Update_Scroll:0000000000000000 Ft_Esd_ScrollPanel_Update_Scroll
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:329    .text.Ft_Esd_ScrollPanel_Update_Contents:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:336    .text.Ft_Esd_ScrollPanel_Update_Contents:0000000000000000 Ft_Esd_ScrollPanel_Update_Contents
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:402    .text.Ft_Esd_ScrollPanel_Render_Contents:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:409    .text.Ft_Esd_ScrollPanel_Render_Contents:0000000000000000 Ft_Esd_ScrollPanel_Render_Contents
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:722    .text.Ft_Esd_ScrollPanel_Render_Contents:00000000000001ec $d
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:729    .text.Ft_Esd_ScrollPanel_Add:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:736    .text.Ft_Esd_ScrollPanel_Add:0000000000000000 Ft_Esd_ScrollPanel_Add
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:810    .text.Ft_Esd_ScrollPanel_Remove:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:817    .text.Ft_Esd_ScrollPanel_Remove:0000000000000000 Ft_Esd_ScrollPanel_Remove
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:904    .text.Ft_Esd_ScrollPanel_ChildX:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:911    .text.Ft_Esd_ScrollPanel_ChildX:0000000000000000 Ft_Esd_ScrollPanel_ChildX
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:971    .text.Ft_Esd_ScrollPanel_ChildY:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:978    .text.Ft_Esd_ScrollPanel_ChildY:0000000000000000 Ft_Esd_ScrollPanel_ChildY
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:1043   .text.Ft_Esd_ScrollPanel_ChildWidth:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:1050   .text.Ft_Esd_ScrollPanel_ChildWidth:0000000000000000 Ft_Esd_ScrollPanel_ChildWidth
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:1107   .text.Ft_Esd_ScrollPanel_ChildHeight:0000000000000000 $t
/var/folders/n8/cvzdcwlj0vl4g_wtyz1ffy300000gn/T//ccAN3zw6.s:1114   .text.Ft_Esd_ScrollPanel_ChildHeight:0000000000000000 Ft_Esd_ScrollPanel_ChildHeight

UNDEFINED SYMBOLS
Ft_Gpu_Hal_WrCmd32
Ft_Esd_Host
Ft_Esd_GpuState_I
Ft_Esd_GpuState
Ft_Esd_TouchArea_TouchY
Ft_Esd_TouchTag_SuppressCurrentTags
