/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_ScrollBar
Header
*/

#ifndef Ft_Esd_ScrollBar__H
#define Ft_Esd_ScrollBar__H

#include "FT_DataTypes.h"
#include "Ft_Esd.h"
#include "Ft_Esd_DefaultTheme.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_Theme.h"
#include "Ft_Esd_TouchTag.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_UI(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_ScrollBar_CLASSID 0x092DCDA6
ESD_SYMBOL(Ft_Esd_ScrollBar_CLASSID, Type = esd_classid_t)

/* EVE builtin scroll bar widget */
ESD_WIDGET(Ft_Esd_ScrollBar, Include = "Ft_Esd_ScrollBar.h", Callback, DisplayName = "ESD Scroll Bar", Category = EsdWidgets, Icon = ":/icons/ui-scroll-bar.png", X = 50, Y = 50, Width = 180, Height = 24)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_INPUT(Theme, Type = Ft_Esd_Theme *)
	Ft_Esd_Theme *(* Theme)(void *context);
	ESD_INPUT(Size, Type = ft_int16_t, Default = 256)
	ft_int16_t(* Size)(void *context);
	ESD_VARIABLE(Value, Type = ft_int16_t, Public)
	ft_int16_t Value;
	ESD_INPUT(Max, Type = ft_int16_t, Max = 32767, Default = 32767)
	ft_int16_t(* Max)(void *context);
	ESD_INPUT(Min, Type = ft_int16_t, Max = 32767, Default = 0)
	ft_int16_t(* Min)(void *context);
	ESD_WRITER(Changed, Type = int)
	void(* Changed)(void *context, int value);
	ESD_VARIABLE(PreviousValue, Type = ft_int16_t, Private)
	ft_int16_t PreviousValue;
	ESD_VARIABLE(PreviousX, Type = ft_int16_t, Private)
	ft_int16_t PreviousX;
	ESD_VARIABLE(PreviousY, Type = ft_int16_t, Private)
	ft_int16_t PreviousY;
	Ft_Esd_TouchTag TouchTag;
} Ft_Esd_ScrollBar;

void Ft_Esd_ScrollBar__Initializer(Ft_Esd_ScrollBar *context);

ESD_SLOT(Start)
void Ft_Esd_ScrollBar_Start(Ft_Esd_ScrollBar *context);

ESD_SLOT(End)
void Ft_Esd_ScrollBar_End(Ft_Esd_ScrollBar *context);

ESD_SLOT(Render)
void Ft_Esd_ScrollBar_Render(Ft_Esd_ScrollBar *context);

ESD_SLOT(Update)
void Ft_Esd_ScrollBar_Update(Ft_Esd_ScrollBar *context);

#endif /* Ft_Esd_ScrollBar__H */

/* end of file */
