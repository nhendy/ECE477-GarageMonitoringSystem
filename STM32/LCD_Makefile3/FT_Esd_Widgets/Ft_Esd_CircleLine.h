/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_CircleLine
Header
*/

#ifndef Ft_Esd_CircleLine__H
#define Ft_Esd_CircleLine__H

#include "Ft_Esd.h"
#include "Ft_Esd_RenderForwarder.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_UI(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_CircleLine_CLASSID 0xD5C271CD
ESD_SYMBOL(Ft_Esd_CircleLine_CLASSID, Type = esd_classid_t)

ESD_WIDGET(Ft_Esd_CircleLine, Include = "Ft_Esd_CircleLine.h", Callback, DisplayName = "ESD Circle Line", Category = EsdBasicWidegts, X = 14, Y = 12, Width = 252, Height = 261, BackToFront)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_VARIABLE(Border, Type = int, Min = 0, Default = 20, Public)
	int Border;
	ESD_VARIABLE(cX, Type = int, Private)
	int cX;
	ESD_VARIABLE(cY, Type = int, Private)
	int cY;
	ESD_VARIABLE(Color, Type = ft_argb32_t, Default = #7d35ac39, Public)
	ft_argb32_t Color;
	ESD_VARIABLE(Radius, Type = int, Default = 100, Private)
	int Radius;
	Ft_Esd_RenderForwarder Render_Forwarder;
} Ft_Esd_CircleLine;

void Ft_Esd_CircleLine__Initializer(Ft_Esd_CircleLine *context);

ESD_SLOT(End)
void Ft_Esd_CircleLine_End(Ft_Esd_CircleLine *context);

#endif /* Ft_Esd_CircleLine__H */

/* end of file */
