/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_LinearRoller
Header
*/

#ifndef Ft_Esd_LinearRoller__H
#define Ft_Esd_LinearRoller__H

#include "Ft_Esd.h"
#include "Ft_Esd_Layout_Fixed.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_TouchScrollLogic.h"
#include "Ft_Esd_TouchTagRenderInterface.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_UI(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_LinearRoller_CLASSID 0xD4E4807C
ESD_SYMBOL(Ft_Esd_LinearRoller_CLASSID, Type = esd_classid_t)

/* Linear Roller Widget */
ESD_WIDGET(Ft_Esd_LinearRoller, Include = "Ft_Esd_LinearRoller.h", Callback, DisplayName = "ESD Linear Roller", Category = EsdWidgets, X = 0, Y = 0, Width = 317, Height = 484)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	/* Length in ticks */
	ESD_INPUT(Length, DisplayName = "Display Length", Type = int, Min = 1, Max = 2048, Default = 20)
	int(* Length)(void *context);
	/* Major count in ticks */
	ESD_VARIABLE(Major, Type = int, Default = 10, Public)
	int Major;
	/* Minor count in ticks */
	ESD_VARIABLE(Minor, Type = int, Min = 1, Max = 1024, Default = 5, Public)
	int Minor;
	/* Color at min gradient point */
	ESD_VARIABLE(ColorMin, DisplayName = "Color Min", Type = ft_argb32_t, Default = #10e3dc, Public)
	ft_argb32_t ColorMin;
	/* Color at max gradient point */
	ESD_VARIABLE(ColorMax, DisplayName = "Color Max", Type = ft_argb32_t, Default = #fd0606, Public)
	ft_argb32_t ColorMax;
	ESD_INPUT(Horizontal, Type = ft_bool_t, Default = true)
	ft_bool_t(* Horizontal)(void *context);
	ESD_VARIABLE(StartValue, Type = ft_double_t, Private)
	ft_double_t StartValue;
	/* Minimum value */
	ESD_INPUT(MinValue, Type = int)
	int(* MinValue)(void *context);
	ESD_INPUT(Value, Type = int, Default = 0)
	int(* Value)(void *context);
	/* Maximum value */
	ESD_INPUT(MaxValue, Type = int, Default = 100)
	int(* MaxValue)(void *context);
	ESD_VARIABLE(Font, Type = ft_int16_t, Min = 16, Max = 34, Default = 26, Public)
	ft_int16_t Font;
	ESD_VARIABLE(Tick, Type = ft_double_t, Private)
	ft_double_t Tick;
	/* Color for axis line */
	ESD_VARIABLE(ColorAxis, DisplayName = "Axis Color", Type = ft_argb32_t, Default = #afd6ca, Public)
	ft_argb32_t ColorAxis;
	/* Set true to trim scale beyong range. */
	ESD_INPUT(IsTrimToRange, DisplayName = "Trim Range", Type = ft_bool_t, Default = true)
	ft_bool_t(* IsTrimToRange)(void *context);
	ESD_VARIABLE(maxValue, Type = int, Private)
	int maxValue;
	/* Set true to show trim scale beyong range. */
	ESD_INPUT(ShowTrimRange, DisplayName = "Show Grey Trim Range", Type = ft_bool_t, Default = true)
	ft_bool_t(* ShowTrimRange)(void *context);
	/* Set true to display tick */
	ESD_INPUT(IsDisplayTick, DisplayName = "Display Tick", Type = ft_bool_t, Default = true)
	ft_bool_t(* IsDisplayTick)(void *context);
	ESD_VARIABLE(centerColor, Type = ft_argb32_t, Default = #fcfcfc, Private)
	ft_argb32_t centerColor;
	ESD_VARIABLE(centerValue, Type = int, Private)
	int centerValue;
	/* Set true to display minor */
	ESD_INPUT(IsDisplayMinor, DisplayName = "Display Minor", Type = ft_bool_t, Default = true)
	ft_bool_t(* IsDisplayMinor)(void *context);
	ESD_VARIABLE(minValue, Type = int, Private)
	int minValue;
	/* Set true to display axis */
	ESD_INPUT(IsDisplayAxis, DisplayName = "Display Axis", Type = ft_bool_t, Default = true)
	ft_bool_t(* IsDisplayAxis)(void *context);
	ESD_INPUT(LabelPadding, DisplayName = "Label Padding in px", Type = int, Min = 1, Max = 100, Default = 30)
	int(* LabelPadding)(void *context);
	ESD_INPUT(MajorLength, DisplayName = "Major Length Scale", Type = float, Min = 0, Max = 1.0, Default = 0.72)
	float(* MajorLength)(void *context);
	ESD_INPUT(MajorWidth, DisplayName = "Major Width ", Type = int, Min = 0, Max = 10, Default = 3)
	int(* MajorWidth)(void *context);
	ESD_INPUT(MinorLength, DisplayName = "Minor Length Scale", Type = float, Min = 0, Max = 1.0, Default = 0.6)
	float(* MinorLength)(void *context);
	ESD_INPUT(MinorWidth, DisplayName = "Minor Width ", Type = int, Min = 0, Max = 10, Default = 2)
	int(* MinorWidth)(void *context);
	ESD_INPUT(TickLength, DisplayName = "Tick Length Scale", Type = float, Min = 0, Max = 1.0, Default = 0.56)
	float(* TickLength)(void *context);
	ESD_INPUT(TickWidth, DisplayName = "Tick Width ", Type = int, Min = 0, Max = 10, Default = 1)
	int(* TickWidth)(void *context);
	Ft_Esd_TouchScrollLogic TouchScroll;
	Ft_Esd_Layout_Fixed Fixed_Positioning;
	Ft_Esd_TouchTagRenderInterface TouchTagRenderInterface;
} Ft_Esd_LinearRoller;

void Ft_Esd_LinearRoller__Initializer(Ft_Esd_LinearRoller *context);

ESD_SLOT(Start)
void Ft_Esd_LinearRoller_Start(Ft_Esd_LinearRoller *context);

ESD_SLOT(Update)
void Ft_Esd_LinearRoller_Update(Ft_Esd_LinearRoller *context);

ESD_SLOT(End)
void Ft_Esd_LinearRoller_End(Ft_Esd_LinearRoller *context);

ESD_OUTPUT(CenterColor, Type = ft_argb32_t)
ft_argb32_t Ft_Esd_LinearRoller_CenterColor(Ft_Esd_LinearRoller *context);

ESD_OUTPUT(CenterValue, Type = int)
int Ft_Esd_LinearRoller_CenterValue(Ft_Esd_LinearRoller *context);

#endif /* Ft_Esd_LinearRoller__H */

/* end of file */
