/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_ImageButton
Header
*/

#ifndef Ft_Esd_ImageButton__H
#define Ft_Esd_ImageButton__H

#include "FT_DataTypes.h"
#include "Ft_Esd.h"
#include "Ft_Esd_BitmapInfo.h"
#include "Ft_Esd_Image.h"
#include "Ft_Esd_Layout_Tag.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_TouchTag.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_UI(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_ImageButton_CLASSID 0x45B488AB
ESD_SYMBOL(Ft_Esd_ImageButton_CLASSID, Type = esd_classid_t)

/* Push button with image support */
ESD_WIDGET(Ft_Esd_ImageButton, Include = "Ft_Esd_ImageButton.h", Callback, DisplayName = "ESD Image Button", Category = EsdWidgets, DefaultSignal = Pushed, Icon = ":/icons/ui-button.png", X = 0, Y = 0, Width = 400, Height = 300)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	/* Minimum Alpha Filter, Set 0 to disable it */
	ESD_INPUT(MinAlpha, DisplayName = "Alpha Filter", Type = ft_uint8_t, Min = 0, Max = 255, Default = 1)
	ft_uint8_t(* MinAlpha)(void *context);
	ESD_VARIABLE(Color, Type = ft_argb32_t, Default = #ffffff, Public)
	ft_argb32_t Color;
	ESD_VARIABLE(ColorPressed, Type = ft_argb32_t, Default = #ffffff, Public)
	ft_argb32_t ColorPressed;
	ESD_INPUT(BitmapNormal, DisplayName = "Bitmap Normal", Type = Ft_Esd_BitmapCell)
	Ft_Esd_BitmapCell(* BitmapNormal)(void *context);
	ESD_INPUT(BitmapPressed, DisplayName = "Bitmap Pressed", Type = Ft_Esd_BitmapCell)
	Ft_Esd_BitmapCell(* BitmapPressed)(void *context);
	ESD_SIGNAL(Down)
	void(* Down)(void *context);
	ESD_VARIABLE(Align, Type = Esd_Align, Default = ESD_ALIGN_TOPLEFT, Public)
	ft_uint8_t Align;
	ESD_SIGNAL(Up)
	void(* Up)(void *context);
	ESD_VARIABLE(Scaling, Type = Esd_Scaling, Default = ESD_SCALING_ORIGINAL, Public)
	ft_uint8_t Scaling;
	ESD_SIGNAL(Pushed)
	void(* Pushed)(void *context);
	ESD_VARIABLE(AutoResize, Type = Esd_AutoResize, Default = ESD_AUTORESIZE_BOTH, Public)
	ft_uint8_t AutoResize;
	ESD_VARIABLE(ScaleX, Type = ft_int32_f16_t, Default = 1, Public)
	ft_int32_f16_t ScaleX;
	ESD_VARIABLE(ScaleY, Type = ft_int32_f16_t, Default = 1, Public)
	ft_int32_f16_t ScaleY;
	Ft_Esd_TouchTag Touch_Tag;
	Ft_Esd_Layout_Tag Set_Touch_Tag;
	Ft_Esd_Image ESD_Image;
} Ft_Esd_ImageButton;

void Ft_Esd_ImageButton__Initializer(Ft_Esd_ImageButton *context);

ESD_SLOT(Start)
void Ft_Esd_ImageButton_Start(Ft_Esd_ImageButton *context);

ESD_SLOT(End)
void Ft_Esd_ImageButton_End(Ft_Esd_ImageButton *context);

ESD_SLOT(Update)
void Ft_Esd_ImageButton_Update(Ft_Esd_ImageButton *context);

ESD_OUTPUT(Pushing, Type = ft_bool_t)
ft_bool_t Ft_Esd_ImageButton_Pushing(Ft_Esd_ImageButton *context);

#endif /* Ft_Esd_ImageButton__H */

/* end of file */
