/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_ScrollableImageWidget
Header
*/

#ifndef Ft_Esd_ScrollableImageWidget__H
#define Ft_Esd_ScrollableImageWidget__H

#include "Ft_Esd.h"
#include "Ft_Esd_BitmapInfo.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_TouchScrollLogic.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_UI(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_ScrollableImageWidget_CLASSID 0x759289FF
ESD_SYMBOL(Ft_Esd_ScrollableImageWidget_CLASSID, Type = esd_classid_t)

/* Scrollable Image Widget */
ESD_WIDGET(Ft_Esd_ScrollableImageWidget, Include = "Ft_Esd_ScrollableImageWidget.h", Callback, DisplayName = "ESD Scroll Image", Category = EsdWidgets, X = 0, Y = 0, Width = 400, Height = 200)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_INPUT(SetXTouchScroll, Type = ft_bool_t, Default = true)
	ft_bool_t(* SetXTouchScroll)(void *context);
	ESD_INPUT(SetYTouchScroll, Type = ft_bool_t)
	ft_bool_t(* SetYTouchScroll)(void *context);
	ESD_INPUT(TouchOffsetThreshold, Type = int, Min = 0, Max = 20, Default = 3)
	int(* TouchOffsetThreshold)(void *context);
	ESD_VARIABLE(OffsetX, Type = double, Private)
	double OffsetX;
	ESD_INPUT(Bitmap_Cell, DisplayName = "Bitmap", Type = Ft_Esd_BitmapCell)
	Ft_Esd_BitmapCell(* Bitmap_Cell)(void *context);
	ESD_VARIABLE(OffsetY, Type = double, Private)
	double OffsetY;
	/* HScroll in % */
	ESD_INPUT(XScroll, DisplayName = "H Scroll %", Type = double, Min = 0, Max = 100, Default = 0)
	double(* XScroll)(void *context);
	/* VScroll in % */
	ESD_INPUT(YScroll, DisplayName = "V Scroll %", Type = double, Min = 0.0, Max = 100.00)
	double(* YScroll)(void *context);
	ESD_INPUT(XOffset, DisplayName = "H Offset", Type = int)
	int(* XOffset)(void *context);
	ESD_VARIABLE(XOffsetUnit, DisplayName = "X Offset Unit in pixel", Type = double, Private)
	double XOffsetUnit;
	ESD_INPUT(YOffset, DisplayName = "V Offset", Type = int)
	int(* YOffset)(void *context);
	ESD_WRITER(XScrollWriter, DisplayName = "H Scroll %", Type = double)
	void(* XScrollWriter)(void *context, double value);
	ESD_INPUT(HScale, DisplayName = "H Scale", Type = double, Min = 0.1, Max = 10, Default = 1)
	double(* HScale)(void *context);
	ESD_INPUT(VScale, DisplayName = "V Scale", Type = double, Min = 0.1, Max = 10, Default = 1)
	double(* VScale)(void *context);
	ESD_SIGNAL(Changed)
	void(* Changed)(void *context);
	ESD_WRITER(YScrollWriter, DisplayName = "V Scroll %", Type = double)
	void(* YScrollWriter)(void *context, double value);
	ESD_VARIABLE(YOffsetUnit, DisplayName = "Y Offset Unit in pixel", Type = double, Private)
	double YOffsetUnit;
	Ft_Esd_TouchScrollLogic Touch_Scroll;
} Ft_Esd_ScrollableImageWidget;

void Ft_Esd_ScrollableImageWidget__Initializer(Ft_Esd_ScrollableImageWidget *context);

ESD_SLOT(Render)
void Ft_Esd_ScrollableImageWidget_Render(Ft_Esd_ScrollableImageWidget *context);

ESD_SLOT(Start)
void Ft_Esd_ScrollableImageWidget_Start(Ft_Esd_ScrollableImageWidget *context);

ESD_SLOT(Update)
void Ft_Esd_ScrollableImageWidget_Update(Ft_Esd_ScrollableImageWidget *context);

ESD_SLOT(SizeChanged)
void Ft_Esd_ScrollableImageWidget_SizeChanged(Ft_Esd_ScrollableImageWidget *context);

#endif /* Ft_Esd_ScrollableImageWidget__H */

/* end of file */
