/*
This file is automatically generated
DO NOT MODIFY BY HAND
Ft_Esd_ProgressBar
Header
*/

#ifndef Ft_Esd_ProgressBar__H
#define Ft_Esd_ProgressBar__H

#include "FT_DataTypes.h"
#include "Ft_Esd.h"
#include "Ft_Esd_DefaultTheme.h"
#include "Ft_Esd_Math.h"
#include "Ft_Esd_Theme.h"
#include "Ft_Esd_Widget.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_UI(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

#define Ft_Esd_ProgressBar_CLASSID 0xDFA193ED
ESD_SYMBOL(Ft_Esd_ProgressBar_CLASSID, Type = esd_classid_t)

/* EVE builtin progress bar widget */
ESD_WIDGET(Ft_Esd_ProgressBar, Include = "Ft_Esd_ProgressBar.h", Callback, DisplayName = "ESD Progress Bar", Category = EsdWidgets, Icon = ":/icons/ui-progress-bar.png", X = 50, Y = 50, Width = 180, Height = 24)
typedef struct
{
	union
	{
		void *Owner;
		Ft_Esd_Widget Widget;
	};
	ESD_INPUT(Theme, Type = Ft_Esd_Theme *)
	Ft_Esd_Theme *(* Theme)(void *context);
	ESD_INPUT(Val, DisplayName = "Value", Type = ft_uint16_t, Max = 65535, Default = 0)
	ft_uint16_t(* Val)(void *context);
	ESD_INPUT(Range, DisplayName = "Range", Type = ft_uint16_t, Min = 0, Max = 65535, Default = 100)
	ft_uint16_t(* Range)(void *context);
} Ft_Esd_ProgressBar;

void Ft_Esd_ProgressBar__Initializer(Ft_Esd_ProgressBar *context);

ESD_SLOT(Render)
void Ft_Esd_ProgressBar_Render(Ft_Esd_ProgressBar *context);

#endif /* Ft_Esd_ProgressBar__H */

/* end of file */
