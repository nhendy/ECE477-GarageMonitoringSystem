/*
This file is automatically generated
Ft_Esd_Slider
Header
*/

#ifndef Ft_Esd_Slider__H
#define Ft_Esd_Slider__H

#include "Ft_Esd.h"
#include "Ft_Esd_Theme.h"
#include "Ft_Esd_TouchTag.h"

#ifndef ESD_LOGIC
#define ESD_LOGIC(name, ...)
#define ESD_ACTOR(name, ...)
#define ESD_WIDGET(name, ...)
#define ESD_PAGE(name, ...)
#define ESD_APPLICATION(name, ...)
#define ESD_INPUT(name, ...)
#define ESD_OUTPUT(name, ...)
#define ESD_SLOT(name, ...)
#define ESD_SIGNAL(name, ...)
#define ESD_VARIABLE(name, ...)
#define ESD_WRITER(name, ...)
#endif

/* EVE builtin slider bar widget */
ESD_WIDGET(Ft_Esd_Slider, Include = "Ft_Esd_Slider.h", Callback, DisplayName = "ESD Slider", Category = EsdWidgets)
typedef struct
{
	void *Parent;
	ESD_INPUT(Theme, Type = Ft_Esd_Theme *, Default = Ft_Esd_Theme_GetCurrent)
	Ft_Esd_Theme *(* Theme)(void *context);
	Ft_Esd_TouchTag TouchTag;
	ESD_INPUT(X, Type = ft_int16_t, Default = 10)
	ft_int16_t(* X)(void *context);
	ESD_INPUT(Y, Type = ft_int16_t, Default = 10)
	ft_int16_t(* Y)(void *context);
	ESD_INPUT(Width, Type = ft_int16_t, Default = 160)
	ft_int16_t(* Width)(void *context);
	ESD_INPUT(Height, Type = ft_int16_t, Default = 20)
	ft_int16_t(* Height)(void *context);
	ESD_INPUT(Alpha, Type = ft_uint8_t, Min = 0, Max = 255, SingleStep = 1, Default = 255)
	ft_uint8_t(* Alpha)(void *context);
	/* Current slider value, must be between 0 and Range inclusive */
	ESD_VARIABLE(Value, Type = ft_int16_t, Public)
	ft_int16_t Value;
	ESD_WRITER(Changed, Type = int)
	void(* Changed)(void *context, int value);
	ESD_VARIABLE(PreviousValue, Type = ft_int16_t, Private)
	ft_int16_t PreviousValue;
	ESD_VARIABLE(PreviousX, Type = ft_int16_t, Private)
	ft_int16_t PreviousX;
	/* Inclusive range of the slider value */
	ESD_INPUT(Range, Type = ft_int16_t, Default = 100)
	ft_int16_t(* Range)(void *context);
	ESD_VARIABLE(PreviousY, Type = ft_int16_t, Private)
	ft_int16_t PreviousY;
} Ft_Esd_Slider;

void Ft_Esd_Slider__Initializer(Ft_Esd_Slider *context);

ESD_SLOT(Render)
void Ft_Esd_Slider_Render(Ft_Esd_Slider *context);

ESD_SLOT(Start)
void Ft_Esd_Slider_Start(Ft_Esd_Slider *context);

ESD_SLOT(Update)
void Ft_Esd_Slider_Update(Ft_Esd_Slider *context);

ESD_SLOT(End)
void Ft_Esd_Slider_End(Ft_Esd_Slider *context);

#endif /* Ft_Esd_Slider__H */

/* end of file */
